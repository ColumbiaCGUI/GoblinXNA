[
  {
    "Id": "666143",
    "ThreadId": "271114",
    "Html": "\r\n<p>Hi Ohan,</p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt; color:black\">&nbsp;first of all,&nbsp;<span>thanks for your time</span>&nbsp;<span>and</span>&nbsp;<span>create this space</span>&nbsp;<span>to share knowledge.</span></span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt; color:black\"><span>Im having some problem when rotating and scaling an .fbx model (like the ship in the tutorial 8), when i scale the model it shrinks (but then scales with no problem) and when i rotate the model\r\n is enlarged (very!). Will the model returning to the original size in the case of rotatint it ? u wrote that the model is very large... anyway this is my code:&nbsp;</span></span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt; color:blue\">protected</span><span lang=\"EN-US\" style=\"font-size:10pt\">\r\n<span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Update(<span style=\"color:#2b91af\">GameTime</span> gameTime)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n</span><span style=\"font-size:10pt\">{</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; <span style=\"color:#2b91af\">\r\nKeyboardState</span> state = <span style=\"color:#2b91af\">Keyboard</span>.GetState();</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:green\">//rotaci&oacute;n eje X</span></span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.W))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deltaRotationX &#43;= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTransParentNode.Rotation =\r\n<span style=\"color:#2b91af\">Quaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Up, (<span style=\"color:blue\">float</span>)deltaRotationY)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Right, (<span style=\"color:blue\">float</span>)deltaRotationX)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Backward, (<span style=\"color:blue\">float</span>)deltaRotationZ);</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.S))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deltaRotationX -= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTransParentNode.Rotation =\r\n<span style=\"color:#2b91af\">Quaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Up, (<span style=\"color:blue\">float</span>)deltaRotationY)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Right, (<span style=\"color:blue\">float</span>)deltaRotationX)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Backward, (<span style=\"color:blue\">float</span>)deltaRotationZ);</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:green\">//rotaci&oacute;n eje Y</span></span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.D))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deltaRotationY &#43;= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTransParentNode.Rotation =\r\n<span style=\"color:#2b91af\">Quaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Up, (<span style=\"color:blue\">float</span>)deltaRotationY)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Right, (<span style=\"color:blue\">float</span>)deltaRotationX)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Backward, (<span style=\"color:blue\">float</span>)deltaRotationZ);</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.A))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deltaRotationY -= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTransParentNode.Rotation =\r\n<span style=\"color:#2b91af\">Quaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Up, (<span style=\"color:blue\">float</span>)deltaRotationY)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Right, (<span style=\"color:blue\">float</span>)deltaRotationX)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Backward, (<span style=\"color:blue\">float</span>)deltaRotationZ);</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:green\">//ritaci&oacute;n eje Z</span></span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.Q))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deltaRotationZ &#43;= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTransParentNode.Rotation =\r\n<span style=\"color:#2b91af\">Quaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Up, (<span style=\"color:blue\">float</span>)deltaRotationY)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Right, (<span style=\"color:blue\">float</span>)deltaRotationX)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Backward, (<span style=\"color:blue\">float</span>)deltaRotationZ);</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.E))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deltaRotationZ -= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTransParentNode.Rotation =\r\n<span style=\"color:#2b91af\">Quaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Up, (<span style=\"color:blue\">float</span>)deltaRotationY)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Right, (<span style=\"color:blue\">float</span>)deltaRotationX)</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp; * <span style=\"color:#2b91af\">\r\nQuaternion</span>.CreateFromAxisAngle(<span style=\"color:#2b91af\">Vector3</span>.Backward, (<span style=\"color:blue\">float</span>)deltaRotationZ);</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:green\">// Zoom in</span></span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.Up))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &#43;= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sphereTransParentNode.Scale =\r\n<span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">Vector3</span>((<span style=\"color:blue\">float</span>)i, (<span style=\"color:blue\">float</span>)i, (<span style=\"color:blue\">float</span>)i);\r\n</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:green\">//Zoom out</span></span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (state.IsKeyDown(<span style=\"color:#2b91af\">Keys</span>.Down))</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i -= gameTime.ElapsedGameTime.TotalSeconds / 2;</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTransParentNode.Scale =\r\n<span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">Vector3</span>((<span style=\"color:blue\">float</span>)i, (<span style=\"color:blue\">float</span>)i, (<span style=\"color:blue\">float</span>)i);</span></p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n</span><span style=\"font-size:10pt\">}</span></p>\r\n<p><span style=\"font-size:10pt; color:blue\">base</span><span style=\"font-size:10pt\">.Update(gameTime);</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p>&nbsp;</p>\r\n<p><strong><span style=\"font-size:10pt\">I&acute;ll </span></strong><span id=\"result_box\" lang=\"en\"><strong><span>appreciate</span>\r\n</strong><span><strong>your help, thank u very much!</strong><br>\r\n</span></span></p>\r\n",
    "PostedDate": "2011-09-01T01:00:10.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "666611",
    "ThreadId": "271114",
    "Html": "<p>If you're using the ship model and if you're taking the codes directly from the tutorial, it's being scaled to much smaller size.&nbsp;</p>\r\n<p>However, in your update code, you're setting the scale to your own scale based on the elapsed time, so it'll appear huge (you're basically resetting it to your own scale from, say, 0.0001f scale or something very small). If you want to scale it from the already scaled version, then you should multiply your scale to its original Scale (e.g.,&nbsp;sphereTransParentNode.Scale *= 1.1f for enlarging, and less than 1.0f for shrinking).</p>\r\n<p>The rotation will not affect the scaling, so it must be something else.</p>\r\n<p>Ohan</p>",
    "PostedDate": "2011-09-01T20:28:35.52-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "666926",
    "ThreadId": "271114",
    "Html": "<p>Thank you very much! i understand the scale problem, it multiplies each axis of the vector. Im trying now to scale it slower b/c it scales too fast.. so ill work on that. Do you see any error in the rotating code? it rotates with no problem buy sometimes the model is enlarged, i assume that might be another problem.</p>",
    "PostedDate": "2011-09-02T10:59:47.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
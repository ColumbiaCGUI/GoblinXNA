[
  {
    "Id": "599210",
    "ThreadId": "254371",
    "Html": "\r\n<p><span style=\"font-size:12pt\">Do we have a way (function/attributes) to know which marker is lost among the layout of markers?<br>\r\n<br>\r\nLet say I have 4 markers in the custom marker layout generated from Markerlayout tool, how do I know which marker is lost during the tracking?<br>\r\n</span></p>\r\n<p><span style=\"font-size:12pt\">Many thanks</span></p>\r\n",
    "PostedDate": "2011-04-18T09:21:26.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "599362",
    "ThreadId": "254371",
    "Html": "<p>Well, I think i got it from one of ohan's post in this forum at http://goblinxna.codeplex.com/discussions/237183.</p>\r\n<p>Thanks</p>\r\n<p>Truyen</p>",
    "PostedDate": "2011-04-18T13:51:23.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "599459",
    "ThreadId": "254371",
    "Html": "<p>Each MarkerNode has an IsFound or something like that.</p>\r\n<p>&nbsp;</p>\r\n<p>Do know which individual marker node is missing (not detected), you'd need to create a markerNode using the IDs (identification numbers) for each marker..so for 4 markers you'd need 4 marker nodes.</p>\r\n<p>&nbsp;</p>\r\n<p>In your update() method, check the isFound (or found or whatever)</p>",
    "PostedDate": "2011-04-18T17:02:24.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "599534",
    "ThreadId": "254371",
    "Html": "<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// Load ALVAR marker IDs from XML file</span>\r\n<span style=\"color: blue;\">var</span> alvarMarkerIds = GetDataFromXml(xmlFileName, <span style=\"color: blue;\">out</span> scale, <span style=\"color: blue;\">out</span> Dimensions);\r\n\r\n<span style=\"color: green;\">// Register ALVAR marker IDs with tracker and get tracker IDs</span>\r\n<span style=\"color: blue;\">int</span>[] trackerIds = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[alvarMarkerIds.Length];\r\n<span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">var</span> i = 0; i &lt; alvarMarkerIds.Length; i++)\r\n   trackerIds[i] = (<span style=\"color: blue;\">int</span>)tracker.AssociateMarker(alvarMarkerIds[i]);\r\n\r\n<span style=\"color: green;\">// Count found markers using LINQ</span>\r\n<span style=\"color: blue;\">var</span> foundMarkerCount = trackerIds.Sum(t =&gt; tracker.FindMarker(t) ? 1 : 0);\r\n\r\n<span style=\"color: green;\">// Convert to percentage</span>\r\n<span style=\"color: blue;\">var</span> multiMarkerFoundPercentage = (<span style=\"color: blue;\">float</span>) foundMarkerCount/trackerIds.Length;\r\n\r\n<span style=\"color: green;\">// Function to load ALVAR markerIds from an ALVAR XML config file</span>\r\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">int</span>[] GetDataFromXml(<span style=\"color: blue;\">string</span> filename, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> scale, <span style=\"color: blue;\">out</span> Vector4 dimensions)\r\n{\r\n    <span style=\"color: blue;\">var</span> list = <span style=\"color: blue;\">new</span> List&lt;<span style=\"color: blue;\">int</span>&gt;();\r\n    <span style=\"color: blue;\">var</span> corners = <span style=\"color: blue;\">new</span> List&lt;Vector3&gt;();\r\n            \r\n    <span style=\"color: blue;\">var</span> reader =\r\n        <span style=\"color: blue;\">new</span> XmlTextReader(filename)\r\n        {\r\n            WhitespaceHandling = WhitespaceHandling.Significant\r\n        };\r\n\r\n    <span style=\"color: blue;\">while</span> (reader.Read())\r\n    {\r\n        <span style=\"color: blue;\">if</span> (reader.NodeType != XmlNodeType.Element) <span style=\"color: blue;\">continue</span>;\r\n\r\n        <span style=\"color: blue;\">if</span> (reader.Name.Equals(<span style=\"color: #a31515;\">\"marker\"</span>))\r\n        {\r\n            <span style=\"color: blue;\">if</span> (!reader.HasAttributes) <span style=\"color: blue;\">continue</span>;\r\n\r\n            reader.MoveToFirstAttribute();\r\n\r\n            <span style=\"color: blue;\">do</span>\r\n            {\r\n                <span style=\"color: blue;\">if</span> (!reader.Name.Equals(<span style=\"color: #a31515;\">\"index\"</span>)) <span style=\"color: blue;\">continue</span>;\r\n\r\n                list.Add(<span style=\"color: blue;\">int</span>.Parse(reader.Value));\r\n                <span style=\"color: blue;\">break</span>;\r\n            }\r\n            <span style=\"color: blue;\">while</span> (reader.MoveToNextAttribute());\r\n\r\n            reader.MoveToElement();\r\n        }\r\n        <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (reader.Name.Equals(<span style=\"color: #a31515;\">\"corner\"</span>))\r\n        {\r\n            <span style=\"color: blue;\">if</span> (!reader.HasAttributes) <span style=\"color: blue;\">continue</span>;\r\n\r\n            <span style=\"color: blue;\">var</span> v = <span style=\"color: blue;\">new</span> Vector3();\r\n\r\n            reader.MoveToFirstAttribute();\r\n\r\n            <span style=\"color: blue;\">do</span>\r\n            {\r\n                <span style=\"color: blue;\">if</span> (reader.Name.Equals(<span style=\"color: #a31515;\">\"x\"</span>))\r\n                    v.X = <span style=\"color: blue;\">float</span>.Parse(reader.Value);\r\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (reader.Name.Equals(<span style=\"color: #a31515;\">\"y\"</span>))\r\n                    v.Y = <span style=\"color: blue;\">float</span>.Parse(reader.Value);\r\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (reader.Name.Equals(<span style=\"color: #a31515;\">\"z\"</span>))\r\n                    v.Z = <span style=\"color: blue;\">float</span>.Parse(reader.Value);\r\n            }\r\n            <span style=\"color: blue;\">while</span> (reader.MoveToNextAttribute());\r\n\r\n            corners.Add(v);\r\n\r\n            reader.MoveToElement();\r\n        }\r\n    }\r\n\r\n    <span style=\"color: blue;\">var</span> minX = corners.Min(v =&gt; v.X);\r\n    <span style=\"color: blue;\">var</span> minY = corners.Min(v =&gt; v.Y);\r\n    <span style=\"color: blue;\">var</span> maxX = corners.Max(v =&gt; v.X);\r\n    <span style=\"color: blue;\">var</span> maxY = corners.Max(v =&gt; v.Y);\r\n    <span style=\"color: blue;\">var</span> width = maxX - minX;\r\n    <span style=\"color: blue;\">var</span> height = maxY - minY;\r\n\r\n    <span style=\"color: blue;\">var</span> singleMarker = corners.GetRange(0, 4);\r\n\r\n    scale = singleMarker.Max(v =&gt; v.X) - singleMarker.Min(v =&gt; v.X);\r\n\r\n    dimensions = <span style=\"color: blue;\">new</span> Vector4((maxX + minX)/2, (maxY + minY)/2, width, height);\r\n\r\n    <span style=\"color: blue;\">return</span> list.ToArray();\r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-04-18T20:14:57.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
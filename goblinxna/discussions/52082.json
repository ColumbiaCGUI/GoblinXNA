[
  {
    "Id": "174819",
    "ThreadId": "52082",
    "Html": "Hi! I would like to display the video image in only part of the window (like the top right corner). How can I do it ? <br>\r\nWhat about multiple windows ?<br>\r\nThanks =)<br>\r\n<br>\r\n",
    "PostedDate": "2009-04-02T07:32:02.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "174994",
    "ThreadId": "52082",
    "Html": "If you want to show the video image in only part of the window, then what you need to do is to set the Scene.ShowCameraImage to false, so it won't be displayed on the entire background. Next, you should get the video image from the ImagePtr property of whatever IVideoCapture class (e.g., DirectShowCapture) you're using, and apply the pixel information (you can retrieve the pixel information from IntPtr using unsafe code) to a texture of your preferred size. Then render this texture on the 2D screen using UI2DRenderer.FillRectangle(...) method.<div><br></div><div>We do not explicitly support multiple windows yet, but you can achieve this by doing the following in your Draw method:</div><div><br></div><div><div>&lt;code&gt;</div><div>// Render the main window with the full width and height</div><div>graphics.GraphicsDevice.Viewport = defaultViewport; </div><div>base.Draw(gameTime);</div><div><br></div><div>// Now change the viewport to a smaller view port at (400, 0) with dimension 400x300</div><div><div>Viewport viewport = new Viewport();</div><div>viewport.Width = 400;</div><div>viewport.Height = 300;</div><div>viewport.X = 400;</div><div>viewport.Y = 0;</div><div>graphics.GraphicsDevice.Viewport = viewport;</div><div>            </div><div>// Render a 2nd window inside of the main window</div><div>scene.Draw(gameTime)</div></div><div>&lt;/code&gt;</div><div><br></div><div>The defaultViewport can be: &lt;code&gt;defaultViewport = graphics.GraphicsDevice.Viewport;&lt;/code&gt; defined in your initialization code.</div><div><br></div><div>I haven't rigorously tested multiple window setting yet, so there might be many bugs. I will include explicit support for multiple window rendering from v3.3. (v3.2 will be released soon, but it won't include explicit support for multiple window). </div><div><br></div><div>Ohan</div></div>",
    "PostedDate": "2009-04-02T13:51:26.063-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "175328",
    "ThreadId": "52082",
    "Html": "Tkx for the quick answer =)<br>\r\n<br>\r\nI've tried what you said, but all i see is a dark rectangle.<br>\r\n<br>\r\nDirectShowCapture captureDevice = new DirectShowCapture();<br>\r\ncaptureDevice.InitVideoCapture(0, 0, FrameRate._30Hz, Resolution._320x240, false);<br>\r\nimage=captureDevice.ImagePtr;<br>\r\n<br>\r\nI set the length to 320*240*3 = 230400 //i dont know another way to find the length<br>\r\nin the Draw() funtion: <br>\r\n<br>\r\nbyte[] bgrData = new byte[length];<br>\r\nMarshal.Copy(tex, bgrData, 0, length);<br>\r\nColor[] colorData = new Color[length / 3];<br>\r\nfor (int i = 0; i &lt; colorData.Length; i++)<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; colorData[i] = new Microsoft.Xna.Framework.Graphics.Color(bgrData[3 * i + 2], bgrData[3 * i + 1], bgrData[3 * i]);<br>\r\n}<br>\r\ntxt = new Texture2D(graphics.GraphicsDevice, 320, 240, 1, TextureUsage.None, SurfaceFormat.Color);// Version 2.0<br>\r\ntxt.SetData&lt;Microsoft.Xna.Framework.Graphics.Color&gt;(colorData);<br>\r\nUI2DRenderer.FillRectangle(new Rectangle(0, 0, 320, 240), txt, Color.White);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n<br>\r\nI am a newbie, so probably I'm doing some stupid thing and dont even realize it.. :|<br>\r\n",
    "PostedDate": "2009-04-03T09:06:46.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "176302",
    "ThreadId": "52082",
    "Html": "The length of the ImagePtr is camera_width * camera_height * bpp. In v3.1, bpp is always 3 (R8G8B8_24). It'll be clearer from v3.2 since I included one more parameter that specifies the format of ImagePtr. <div><br></div><div>In your code, I don't see that you're copying your &quot;image&quot; data to your texture. You need to do something similar to the following:</div><div><br></div><div>unsafe{</div><div>   byte* pixels = (byte*) captureDevice.ImagePtr;</div><div>   int[] texture = new int[camera_width * camera_height];</div><div>   for(int i = 0; i &lt; camera_width * camera_height * 3; i++)</div><div>       texture[i/3] = (appropriately shifted pixel information based on your texture format);</div><div><br></div><div>   (your texture).SetData&lt;int&gt;(texture);</div><div>}</div><div><br></div><div>Ohan</div>",
    "PostedDate": "2009-04-06T13:44:00.64-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]
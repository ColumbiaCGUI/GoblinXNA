[
  {
    "Id": "161085",
    "ThreadId": "48273",
    "Html": "I just released version 3.1 which has a few major changes and several minor changes. Both the SVN code and download file is updated, so you can download either of them. The changes are listed below (also included in the ReleaseNotes.txt in the release):<br>\r\n<br>\r\n-----------------------------------------------------------------------------------------------------------------<br>\r\n<br>\r\n<p>1. Addition of Tutorial 12 that demonstrates advanced physics functionalities including joint<br>\r\n   physics and vehicle physics simulation.</p>\r\n<p>2. Significant structural and design changes for video capturing and marker tracking for better<br>\r\n   flexibility and extensibility.</p>\r\n<p>   a) Point Grey (PGRFly) related classes are moved under GoblinXNA.Device.Capture.PointGrey package.</p>\r\n<p>   b) Marker tracking related utility classes are moved from GoblinXNA.Device.Vision.Util to<br>\r\n      GoblinXNA.Device.Util.</p>\r\n<p>   c) VideoCapture class is now gone. Instead, IVideoCapture interface is added and each different<br>\r\n      video streaming classes are implemented in its own class that extend this IVideoCapture interface<br>\r\n      (e.g., DirectShowCapture, PointGreyCapture). Now if you want to create your own video streaming<br>\r\n      class that uses other video streaming library, you simply implement IVideoCapture interface. <br>\r\n      You can then add it to Scene class to use it for either marker tracking or simply displaying <br>\r\n      the video image on the background. Prior to this change, you had to modify the VideoCapture class<br>\r\n      inside the Goblin XNA and recompile the library if you want to create your own streaming class. <br>\r\n      Now, you can implement the class outside of Goblin XNA, and you don't need to modify and recompile <br>\r\n      Goblin XNA. </p>\r\n<p>   d) MarkerTracker class is now gone. Instead, IMarkerTracker interface is added. ARTagTracker class<br>\r\n      implements this interface using ARTag library. If you want to implement your own marker tracking<br>\r\n      class using another tracker library and use it with Goblin XNA, you simply need to implement this<br>\r\n      interface and assign your tracker implementation to Scene.MarkerTracker. </p>\r\n<p>3. Modifications and additions in the Scene class due to the redesign.</p>\r\n<p>   a) Scene.InitMarkerModules(...) function is removed.</p>\r\n<p>   b) Scene.InitVideoCapture(...) function is replaced with Scene.AddVideoCapture(...) function. The<br>\r\n      signature of the function changed, so please see the API documentation as well as the tutorial 8<br>\r\n      for modification details. Before you can add a video capture device, you need to initialize the<br>\r\n      device by calling InitVideoCapture(...) function with appropriate parameters.</p>\r\n<p>   c) Scene.InitMarkerTracker(...) function is replaced with Scene.MarkerTracker property. Now you can<br>\r\n      directly set the IMarkerTracker implementation you want to use to Scene.MarkerTracker. Before you<br>\r\n      can set the marker tracker, you need to initialize it.</p>\r\n<p>   d) Added Scene.TrackerVideoID property which is used to specifiy which capture device to use for<br>\r\n      performing the tracking when there are more than one video capture devices. Prior to this, the<br>\r\n      Scene.OverlayVideoID was used to specify which capture device to use, but now, they are separated.<br>\r\n      This means that you can show a different video overlay image on the background from the video image<br>\r\n      you use for performing the tracking. This is useful when you have a camera that is used only for <br>\r\n      tracking hand gestures that use attached markers on the fingers or hand, and a separate camera to<br>\r\n      visualize the physical world. </p>\r\n<p>   e) Added Scene.FreezeVideo property which can be used to freeze the video streaming. (Note that the<br>\r\n      video image is frozen, but the virtual world is not frozen).</p>\r\n<p>4. MarkerNode's constructor signature is modified, and new properties are added.</p>\r\n<p>   a) Due to the changes to MarkerTracker class, we removed the arTagArrayName parameter since the<br>\r\n      marker tracking library may not necessary be ARTag. Instead, we added markerConfigs parameter<br>\r\n      which is an array of String that can specify the marker configurations for any type of marker<br>\r\n      tracker library. </p>\r\n<p>   b) We removed the smoothingAlpha parameter, but instead, we added Smoother property which can be set to<br>\r\n      any implementation of ISmoother interface. This way, the programmer has the choice of what smoothing<br>\r\n      algorithm to apply instead of forced to use our DES (double-exponential-smoothing) implementation.</p>\r\n<p>   c) We added Predictor property which can be set to any implementation of IPredictor interface. This <br>\r\n      predictor is used to predict the marker transform when the marker can not be found in the image<br>\r\n      for a few frames.</p>\r\n<p>5. UserData property is added to the Node class which is the ancestor of all Node types. Since it's an Object<br>\r\n   type, you can associate any type of information to a Node by using this UserData property. </p>\r\n<p>6. Added Smoother and Predictor properties to TrackerNode.</p>\r\n<p>7. Added AddInputDevice(..), Add6DOFInputDevice(..), and Reenumerate() functions to InputMapper class, so now<br>\r\n   you can add your own implemented InputDevice or InputDevice_6DOF class to the InputMapper, and use it with<br>\r\n   the TrackerNode. After you add a new device to InputMapper, make sure to call Reenumerate() so that the<br>\r\n   newly added device is recognized.</p>\r\n",
    "PostedDate": "2009-02-23T12:13:20.48-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]
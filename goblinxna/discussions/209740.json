[
  {
    "Id": "432585",
    "ThreadId": "209740",
    "Html": "<p>Hi,&nbsp;</p>\r\n<p>in the user manual I read about a function called <em>GetBitmapImage()</em> for <em>DirectShowCapture </em>but it's not available in version 3.4.<br>Is there a function with which I get the current captured image? <em>GetImageTextrue()</em> works fine but it only for integer array which contains only the RGB product of each pixel and I need the color.&nbsp;</p>\r\n<p>How to use imagePtr?<br>I tried following but get a empty img:&nbsp;</p>\r\n<p>\r\n<pre>IntPtr img = new IntPtr(); &nbsp; &nbsp; &nbsp; &nbsp; \r\ncaptureDevice.GetImageTexture(curImg, ref img);</pre>\r\n</p>\r\n<p>Thank you!</p>",
    "PostedDate": "2010-04-18T23:49:33.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437357",
    "ThreadId": "209740",
    "Html": "<p>Hi,</p>\r\n<p>Sorry for delayed reply.</p>\r\n<p>The user manual had the old function call for DirectShowCapture, and it doesn't have GetBitmapImage() function anymore.</p>\r\n<p>The best way to do this is actually changing the code of DirectShowCapture.cs in GoblinXNA, and recompile it.</p>\r\n<p>1. Add the following lines in the member field of the class:</p>\r\n<p>&nbsp;</p>\r\n<pre><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">delegate</span> <span style=\"color:blue\">bool</span> ImageReadyCallback(IntPtr image, <span style=\"color:blue\">int</span>[] background);\r\n<span style=\"color:blue\">private</span> ImageReadyCallback imageReadyCallback;</pre>\r\n</div>\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p>2. Add the following lines under the property list:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> ImageReadyCallback Callback\r\n{\r\n    <span style=\"color:blue\">set</span> { imageReadyCallback = value; }\r\n}</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>3. Replace (Marsha.Copy(grabbedImage, ....)) line with the following codes in GetImageTexture function:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">bool</span> replaceBackground = <span style=\"color:blue\">false</span>;\r\n<span style=\"color:blue\">if</span> (imageReadyCallback != <span style=\"color:blue\">null</span>)\r\n    replaceBackground = imageReadyCallback(grabbedImage, returnImage);\r\n\r\n<span style=\"color:blue\">if</span>(!replaceBackground)\r\n    Marshal.Copy(grabbedImage, returnImage, 0, returnImage.Length);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Now, in your code, add the following code:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>((DirectShowCapture)captureDevice).Callback = <span style=\"color:blue\">delegate</span>(IntPtr image, <span style=\"color:blue\">int</span>[] background)\r\n{\r\n    <span style=\"color:green\">// set this true if you want to replace the current background video image by assigning 'background' parameter</span>\r\n    <span style=\"color:blue\">bool</span> replaceBackground = <span style=\"color:blue\">false</span>;\r\n\r\n    <span style=\"color:green\">// do whatever you like with the image pointer which contains the information of the grabbed video image</span>\r\n    <span style=\"color:green\">// Note that you will need to use unsafe code to access the RGB data in the memory address</span>\r\n    <span style=\"color:green\">// For DirectShowCapture, the pixel order of the grabbed image is left to right, and down to top</span>\r\n\r\n    <span style=\"color:blue\">return</span> replaceBackground;\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>This callback function will be called whenever it updates the background video image.</p>\r\n<p>This lets you access the captured image as well as assign your own background video image (for example, a gray-scaled video image converted from the original RGB image). This change will be included in v3.5 release, but for now, please modify the GoblinXNA as mentioned above and recompile it.</p>\r\n<p>&nbsp;</p>\r\n<p>Ohan</p>",
    "PostedDate": "2010-04-29T17:07:05.853-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "439597",
    "ThreadId": "209740",
    "Html": "<p>Thank you! Works fine for me now. &nbsp;If I want to flip the captured image horizontal, where is the best place to add a function?</p>",
    "PostedDate": "2010-05-05T18:12:25.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440789",
    "ThreadId": "209740",
    "Html": "<p>Flipping of the image has two issues based on what you want to do.</p>\r\n<p>If you simply flip the rendering of the image horizontally, then the overlaid tracking result from the marker tracker will not match the rendered background image, so you will have to flip the pixels that are passed to the marker tracking library as well (you need to change DirectShowCapture's GetTextureImage function to do this).&nbsp;</p>\r\n<p>If you don't care about the marker tracking, but simply want to flip the image, then fill 'background' pixels in horizontally flipped order in&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>((DirectShowCapture)captureDevice).Callback = <span style=\"color:blue\">delegate</span>(IntPtr image, <span style=\"color:blue\">int</span>[] background)\r\n{\r\n    <span style=\"color:green\">// set this true if you want to replace the current background video image by assigning 'background' parameter</span>\r\n    <span style=\"color:blue\">bool</span> replaceBackground = <span style=\"color:blue\">false</span>;\r\n\r\n    <span style=\"color:green\">// do whatever you like with the image pointer which contains the information of the grabbed video image</span>\r\n    <span style=\"color:green\">// Note that you will need to use unsafe code to access the RGB data in the memory address</span>\r\n    <span style=\"color:green\">// For DirectShowCapture, the pixel order of the grabbed image is left to right, and down to top</span>\r\n\r\n    <span style=\"color:blue\">return</span> replaceBackground;\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Make sure to set replaceBackground to true in that case.</p>\r\n<p>If you want to flip the image and also have the marker tracking show correct result, the best thing to do is to use your camera software to perform the flipping.</p>\r\n<p>Ohan</p>",
    "PostedDate": "2010-05-09T06:30:47.827-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440926",
    "ThreadId": "209740",
    "Html": "<p>Thanks again!&nbsp;</p>\r\n<p>I inserted following code and I'm able to flip the screen easily now.&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>((DirectShowCapture2)captureDevice).Callback = <span style=\"color:blue\">delegate</span>(IntPtr image, <span style=\"color:blue\">int</span>[] background)\r\n            {\r\n                <span style=\"color:green\">// set this true if you want to replace the current background video image by assigning 'background' parameter</span>\r\n                <span style=\"color:blue\">bool</span> replaceBackground = <span style=\"color:blue\">true</span>;\r\n<span style=\"white-space:pre\">\t\t</span>\r\n                <span style=\"color:blue\">if</span> (flipHorizontal)\r\n                {\r\n                    <span style=\"color:blue\">unsafe</span>\r\n                    {\r\n                        <span style=\"color:blue\">int</span>* imgPtr = (<span style=\"color:blue\">int</span>*)image;\r\n                        <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; captureDevice.Height; i++)\r\n                        {\r\n                            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> j = 1; j &lt;= captureDevice.Width; j++)\r\n                            {\r\n                                background[captureDevice.Width - j + i * captureDevice.Width] = *imgPtr++;\r\n                            }\r\n                        }                       \r\n                    }\r\n                }\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    <span style=\"color:blue\">unsafe</span>\r\n                    {\r\n                        <span style=\"color:blue\">int</span>* imgPtr = (<span style=\"color:blue\">int</span>*)image;\r\n                        <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; captureDevice.Height; i++)\r\n                        {\r\n                            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> j = 0; j &lt; captureDevice.Width; j++)\r\n                            {\r\n                                background[j + i * captureDevice.Width] = *imgPtr++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                ........\r\n                <span style=\"color:blue\">return</span> replaceBackground;\r\n         }; \r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-09T21:19:12.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
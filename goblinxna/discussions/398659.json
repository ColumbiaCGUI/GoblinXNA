[
  {
    "Id": "923963",
    "ThreadId": "398659",
    "Html": "\r\n<p>i write code to get pitch, yaw, and roll.</p>\r\n<p>i have no error in my code but not response with warp 920</p>\r\n<p>so can you tell me how do it</p>\r\n<p>that my code</p>\r\n<p></p>\r\n<hr>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Xml;\r\n\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Audio;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Content;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.GamerServices;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Graphics;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Input;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Media;\r\n\r\n\r\n<span style=\"color:blue\">using</span> GoblinXNA;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Graphics;\r\n<span style=\"color:blue\">using</span> GoblinXNA.SceneGraph;\r\n<span style=\"color:blue\">using</span> Model = GoblinXNA.Graphics.Model;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Graphics.Geometry;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Capture;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Vision;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Vision.Marker;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Util;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Physics;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Helpers;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.iWear;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Generic;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Shaders;\r\n\r\n<span style=\"color:blue\">using</span> GoblinXNA.UI.UI2D;\r\n\r\n<span style=\"color:blue\">namespace</span> iwear_test\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> This is the main type for your game</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Game1 : Microsoft.Xna.Framework.Game\r\n    {\r\n        <span style=\"color:blue\">bool</span> FULL_SCREEN = <span style=\"color:blue\">false</span>;\r\n\r\n        GraphicsDeviceManager graphics;\r\n        SpriteFont sampleFont;\r\n\r\n        Scene scene;\r\n       <span style=\"color:green\">// MarkerNode groundMarkerNode;</span>\r\n        <span style=\"color:green\">//true</span>\r\n        <span style=\"color:blue\">bool</span> stereoMode = <span style=\"color:blue\">false</span>;\r\n\r\n        iWearTracker iTracker;\r\n\r\n        <span style=\"color:green\">//RenderTarget2D stereoScreenLeft;</span>\r\n        <span style=\"color:green\">//RenderTarget2D stereoScreenRight;</span>\r\n        <span style=\"color:green\">//Rectangle leftRect;</span>\r\n        <span style=\"color:green\">//Rectangle rightRect;</span>\r\n        <span style=\"color:green\">//Rectangle leftSource;</span>\r\n        <span style=\"color:green\">//Rectangle rightSource;</span>\r\n        SpriteBatch spriteBatch;\r\n        Vector3 x1;\r\n        Quaternion q1;\r\n        Vector3 t1;\r\n        <span style=\"color:green\">//string identifier;</span>\r\n\r\n<span style=\"color:green\">//float markerSize = 32.4f;</span>\r\n        <span style=\"color:blue\">public</span> Game1()\r\n        {\r\n            graphics = <span style=\"color:blue\">new</span> GraphicsDeviceManager(<span style=\"color:blue\">this</span>);\r\n            Content.RootDirectory = <span style=\"color:#a31515\">&quot;Content&quot;</span>;\r\n\r\n            <span style=\"color:green\">//full screen</span>\r\n\r\n            <span style=\"color:blue\">if</span> (FULL_SCREEN)\r\n                graphics.IsFullScreen = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                graphics.PreferredBackBufferWidth = 1280;\r\n                graphics.PreferredBackBufferHeight = 480;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Allows the game to perform any initialization it needs to before starting to run.</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> This is where it can query for any required services and load any non-graphic</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> related content.  Calling base.Initialize will enumerate through any components</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> and initialize them as well.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:green\">// TODO: Add your initialization logic here</span>\r\n\r\n            <span style=\"color:blue\">base</span>.Initialize();\r\n\r\n            <span style=\"color:green\">// Initialize the GoblinXNA framework</span>\r\n            State.InitGoblin(graphics, Content, <span style=\"color:#a31515\">&quot;&quot;</span>);\r\n\r\n            State.ThreadOption = (<span style=\"color:blue\">ushort</span>)(ThreadOptions.MarkerTracking);\r\n\r\n            <span style=\"color:green\">// Initialize the scene graph</span>\r\n            scene = <span style=\"color:blue\">new</span> Scene();\r\n            <span style=\"color:green\">// Set up the VUZIX's iWear VR920 for both stereo and orientation tracking</span>\r\n            SetupIWear();\r\n\r\n        }\r\n        \r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> LoadContent will be called once per game and is the place to load</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> all of your content.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> LoadContent()\r\n        {\r\n            sampleFont = Content.Load&lt;SpriteFont&gt;(<span style=\"color:#a31515\">&quot;Sample&quot;</span>);\r\n\r\n            <span style=\"color:blue\">base</span>.LoadContent();\r\n            <span style=\"color:green\">// Create a new SpriteBatch, which can be used to draw textures.</span>\r\n            spriteBatch = <span style=\"color:blue\">new</span> SpriteBatch(GraphicsDevice);\r\n\r\n            <span style=\"color:green\">// TODO: use this.Content to load your game content here</span>\r\n        }\r\n\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Allows the game to run logic such as updating the world,</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> checking for collisions, gathering input, and playing audio.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;gameTime&quot;&gt;</span><span style=\"color:green\">Provides a snapshot of timing values.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Update(GameTime gameTime)\r\n        {\r\n            <span style=\"color:green\">// Allows the game to exit</span>\r\n            <span style=\"color:blue\">if</span> (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)\r\n                <span style=\"color:blue\">this</span>.Exit();\r\n            InputMapper.Instance.GetWorldTransformation(iTracker.Identifier).Decompose(<span style=\"color:blue\">out</span> x1, <span style=\"color:blue\">out</span> q1, <span style=\"color:blue\">out</span> t1);\r\n\r\n            forward = InputMapper.Instance.GetWorldTransformation(iTracker.Identifier).Forward;\r\n            <span style=\"color:green\">// TODO: Add your update logic here</span>\r\n\r\n            <span style=\"color:blue\">base</span>.Update(gameTime);\r\n        }\r\n        Vector3 forward;\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Draw(GameTime gameTime)\r\n        {\r\n            GraphicsDevice.Clear(Color.Azure);\r\n            spriteBatch.Begin();\r\n            <span style=\"color:green\">//spriteBatch.DrawString(sampleFont, &quot;hhhhhh&quot;, new Vector2(20, 45), Color.Black);</span>\r\n            spriteBatch.DrawString(sampleFont, forward.ToString(), <span style=\"color:blue\">new</span> Vector2(20, 45), Color.Black);\r\n            spriteBatch.DrawString(sampleFont, x1.ToString(), <span style=\"color:blue\">new</span> Vector2(20, 100), Color.Black);\r\n            spriteBatch.DrawString(sampleFont,t1.ToString(), <span style=\"color:blue\">new</span> Vector2(20, 150), Color.Black);\r\n            DrawText();\r\n            spriteBatch.End();\r\n           \r\n            <span style=\"color:green\">// TODO: Add your drawing code here</span>\r\n            scene.Draw(gameTime.ElapsedGameTime, gameTime.IsRunningSlowly);\r\n            RenderUI();\r\n            DrawText();\r\n    \r\n            <span style=\"color:blue\">base</span>.Draw(gameTime);\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SetupIWear()\r\n        {\r\n            <span style=\"color:green\">// Get an instance of iWearTracker</span>\r\n            iTracker = iWearTracker.Instance;\r\n            <span style=\"color:green\">// We need to initialize it before adding it to the InputMapper class</span>\r\n            iTracker.Initialize();\r\n            <span style=\"color:green\">// If not stereo, then we need to set the iWear VR920 to mono mode (by default, it's</span>\r\n            <span style=\"color:green\">// stereo mode if stereo is available)</span>\r\n            <span style=\"color:blue\">if</span> (stereoMode)\r\n                iTracker.EnableStereo = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:green\">// Add this iWearTracker to the InputMapper class for automatic update and disposal</span>\r\n            InputMapper.Instance.Add6DOFInputDevice(iTracker);\r\n            <span style=\"color:green\">// Re-enumerate all of the input devices so that the newly added device can be found</span>\r\n            InputMapper.Instance.Reenumerate();\r\n\r\n           <span style=\"color:green\">// identifier=iTracker.Identifier;</span>\r\n            \r\n            <span style=\"color:green\">//InputMapper.Instance.ge</span>\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SetupStereoCamera()\r\n        {\r\n            StereoCamera camera = <span style=\"color:blue\">new</span> StereoCamera();\r\n\r\n            <span style=\"color:green\">// Load the right eye view matrix from a calibration file created in StereoCameraCalibration tool</span>\r\n            Matrix cameraRightView = Matrix.Identity;\r\n            MatrixHelper.LoadMatrixFromXML(<span style=\"color:#a31515\">&quot;Wrap920_Stereo_Millimeter.xml&quot;</span>, <span style=\"color:blue\">ref</span> cameraRightView);\r\n\r\n            camera.LeftView = Matrix.CreateLookAt(Vector3.Zero, -Vector3.UnitZ, Vector3.UnitY);\r\n            camera.RightView = Matrix.Invert(cameraRightView);\r\n\r\n            CameraNode cameraNode = <span style=\"color:blue\">new</span> CameraNode(camera);\r\n\r\n            scene.RootNode.AddChild(cameraNode);\r\n            scene.CameraNode = cameraNode;\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RenderUI()\r\n        {\r\n            UI2DRenderer.WriteText(Vector2.Zero, <span style=\"color:#a31515\">&quot;Stereoscopic UI&quot;</span>, Color.Red,\r\n                sampleFont, Vector2.One, GoblinEnums.HorizontalAlignment.Center,\r\n                GoblinEnums.VerticalAlignment.Top);\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px; top:0px; width:1px; height:1px; overflow:hidden\">\r\nusing System;<br>\r\nusing System.Collections.Generic;<br>\r\nusing System.Linq;<br>\r\nusing System.Xml;<br>\r\n<br>\r\nusing Microsoft.Xna.Framework;<br>\r\nusing Microsoft.Xna.Framework.Audio;<br>\r\nusing Microsoft.Xna.Framework.Content;<br>\r\nusing Microsoft.Xna.Framework.GamerServices;<br>\r\nusing Microsoft.Xna.Framework.Graphics;<br>\r\nusing Microsoft.Xna.Framework.Input;<br>\r\nusing Microsoft.Xna.Framework.Media;<br>\r\n<br>\r\n<br>\r\nusing GoblinXNA;<br>\r\nusing GoblinXNA.Graphics;<br>\r\nusing GoblinXNA.SceneGraph;<br>\r\nusing Model = GoblinXNA.Graphics.Model;<br>\r\nusing GoblinXNA.Graphics.Geometry;<br>\r\nusing GoblinXNA.Device.Capture;<br>\r\nusing GoblinXNA.Device.Vision;<br>\r\nusing GoblinXNA.Device.Vision.Marker;<br>\r\nusing GoblinXNA.Device.Util;<br>\r\nusing GoblinXNA.Physics;<br>\r\nusing GoblinXNA.Helpers;<br>\r\nusing GoblinXNA.Device.iWear;<br>\r\nusing GoblinXNA.Device;<br>\r\nusing GoblinXNA.Device.Generic;<br>\r\nusing GoblinXNA.Shaders;<br>\r\n<br>\r\nusing GoblinXNA.UI.UI2D;<br>\r\n<br>\r\nnamespace iwear_test<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp; /// This is the main type for your game<br>\r\n&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp; public class Game1 : Microsoft.Xna.Framework.Game<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool FULL_SCREEN = false;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GraphicsDeviceManager graphics;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SpriteFont sampleFont;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scene scene;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // MarkerNode groundMarkerNode;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //true<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool stereoMode = false;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iWearTracker iTracker;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //RenderTarget2D stereoScreenLeft;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //RenderTarget2D stereoScreenRight;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Rectangle leftRect;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Rectangle rightRect;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Rectangle leftSource;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Rectangle rightSource;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SpriteBatch spriteBatch;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 x1;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Quaternion q1;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 t1;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //string identifier;<br>\r\n<br>\r\n//float markerSize = 32.4f;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Game1()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; graphics = new GraphicsDeviceManager(this);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Content.RootDirectory = &quot;Content&quot;;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //full screen<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (FULL_SCREEN)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; graphics.IsFullScreen = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; graphics.PreferredBackBufferWidth = 1280;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; graphics.PreferredBackBufferHeight = 480;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Allows the game to perform any initialization it needs to before starting to run.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// This is where it can query for any required services and load any non-graphic<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// related content.&nbsp; Calling base.Initialize will enumerate through any components<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// and initialize them as well.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void Initialize()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TODO: Add your initialization logic here<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.Initialize();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize the GoblinXNA framework<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; State.InitGoblin(graphics, Content, &quot;&quot;);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; State.ThreadOption = (ushort)(ThreadOptions.MarkerTracking);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize the scene graph<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scene = new Scene();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set up the VUZIX's iWear VR920 for both stereo and orientation tracking<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetupIWear();<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If stereo mode is true, then setup stereo camera. If not stereo, we don't need to<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // setup a camera since it's automatically setup by Scene when marker tracker is<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // used. This stereo camera needs to be setup before setting up the marker tracker so<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the stereo camera will have correct projection matrix computed by the marker tracker.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //if (stereoMode)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SetupStereoCamera();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set up the lights used in the scene<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // CreateLights();<br>\r\n<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Use the multi light shadow map shader for our shadow mapping<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // NOTE: In order to use shadow mapping, you will need to add 'MultiLightShadowMap.fx'<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and 'SimpleShadowShader.fx' shader files to your 'Content' directory<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //scene.ShadowMap = new MultiLightShadowMap();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create 3D objects<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //CreateObjects();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create the ground that represents the physical ground marker array<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //CreateGround();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //State.ShowFPS = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// LoadContent will be called once per game and is the place to load<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// all of your content.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void LoadContent()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sampleFont = Content.Load&lt;SpriteFont&gt;(&quot;Sample&quot;);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.LoadContent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a new SpriteBatch, which can be used to draw textures.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spriteBatch = new SpriteBatch(GraphicsDevice);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TODO: use this.Content to load your game content here<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Allows the game to run logic such as updating the world,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// checking for collisions, gathering input, and playing audio.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;gameTime&quot;&gt;Provides a snapshot of timing values.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void Update(GameTime gameTime)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Allows the game to exit<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Exit();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InputMapper.Instance.GetWorldTransformation(iTracker.Identifier).Decompose(out x1, out q1, out t1);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; forward = InputMapper.Instance.GetWorldTransformation(iTracker.Identifier).Forward;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TODO: Add your update logic here<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.Update(gameTime);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 forward;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// This is called when the game should draw itself.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;gameTime&quot;&gt;Provides a snapshot of timing values.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void Draw(GameTime gameTime)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GraphicsDevice.Clear(Color.Azure);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spriteBatch.Begin();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //spriteBatch.DrawString(sampleFont, &quot;hhhhhh&quot;, new Vector2(20, 45), Color.Black);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spriteBatch.DrawString(sampleFont, forward.ToString(), new Vector2(20, 45), Color.Black);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spriteBatch.DrawString(sampleFont, x1.ToString(), new Vector2(20, 100), Color.Black);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spriteBatch.DrawString(sampleFont,t1.ToString(), new Vector2(20, 150), Color.Black);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DrawText();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spriteBatch.End();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TODO: Add your drawing code here<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scene.Draw(gameTime.ElapsedGameTime, gameTime.IsRunningSlowly);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RenderUI();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DrawText();<br>\r\n&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.Draw(gameTime);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void SetupIWear()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get an instance of iWearTracker<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iTracker = iWearTracker.Instance;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We need to initialize it before adding it to the InputMapper class<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iTracker.Initialize();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If not stereo, then we need to set the iWear VR920 to mono mode (by default, it's<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // stereo mode if stereo is available)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (stereoMode)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iTracker.EnableStereo = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add this iWearTracker to the InputMapper class for automatic update and disposal<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InputMapper.Instance.Add6DOFInputDevice(iTracker);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Re-enumerate all of the input devices so that the newly added device can be found<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InputMapper.Instance.Reenumerate();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // identifier=iTracker.Identifier;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //InputMapper.Instance.ge<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void CreateObjects()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a sphere geometry<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GeometryNode sphereNode = new GeometryNode(&quot;Sphere&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereNode.Model = new TexturedSphere(14, 20, 20);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereNode.Model.ShadowAttribute = ShadowAttribute.ReceiveCast;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //sphereNode.Model.Shader = new SimpleShadowShader(scene.ShadowMap);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Material sphereMat = new Material();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereMat.Diffuse = Color.Red.ToVector4();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereMat.Specular = Color.White.ToVector4();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereMat.SpecularPower = 20;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereNode.Material = sphereMat;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TransformNode sphereTrans = new TransformNode();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sphereTrans.Translation = new Vector3(0, 0, 20);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //groundMarkerNode.AddChild(sphereTrans);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //sphereTrans.AddChild(sphereNode);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void SetupStereoCamera()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StereoCamera camera = new StereoCamera();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Load the right eye view matrix from a calibration file created in StereoCameraCalibration tool<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Matrix cameraRightView = Matrix.Identity;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatrixHelper.LoadMatrixFromXML(&quot;Wrap920_Stereo_Millimeter.xml&quot;, ref cameraRightView);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; camera.LeftView = Matrix.CreateLookAt(Vector3.Zero, -Vector3.UnitZ, Vector3.UnitY);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; camera.RightView = Matrix.Invert(cameraRightView);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CameraNode cameraNode = new CameraNode(camera);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scene.RootNode.AddChild(cameraNode);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scene.CameraNode = cameraNode;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void RenderUI()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UI2DRenderer.WriteText(Vector2.Zero, &quot;Stereoscopic UI&quot;, Color.Red,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sampleFont, Vector2.One, GoblinEnums.HorizontalAlignment.Center,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoblinEnums.VerticalAlignment.Top);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void CreateLights()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a directional light source<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LightSource lightSource = new LightSource();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lightSource.Direction = new Vector3(1, -1, -1);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lightSource.Diffuse = new Vector4(0.8f, 0.8f, 0.8f, 1);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lightSource.Specular = new Vector4(0.6f, 0.6f, 0.6f, 1);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a light node to hold the light source<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LightNode lightNode = new LightNode();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lightNode.CastShadows = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lightNode.LightProjection = Matrix.CreatePerspectiveFieldOfView(MathHelper.PiOver4,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1, 1f, 500);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add an ambient component<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lightNode.AmbientLightColor = new Vector4(0.3f, 0.3f, 0.3f, 1);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lightNode.LightSource = lightSource;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add this light node to the root node<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //groundMarkerNode.AddChild(lightNode);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void DrawText()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // spriteBatch.DrawString(sampleFont, &quot;Cannon power: 100&quot;, new Vector2(20, 45), Color.White);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //private void CreateGround()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; GeometryNode groundNode = new GeometryNode(&quot;Ground&quot;);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundNode.Model = new TexturedBox(340, 200, 0.1f);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; // Set this ground model to act as an occluder so that it appears transparent<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundNode.IsOccluder = true;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; // Make the ground model to receive shadow casted by other objects with<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; // CastShadows set to true<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundNode.Model.ShadowAttribute = ShadowAttribute.ReceiveOnly;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundNode.Model.Shader = new SimpleShadowShader(scene.ShadowMap);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; Material groundMaterial = new Material();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundMaterial.Diffuse = new Vector4(0.5f, 0.5f, 0.5f, 0.5f);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundMaterial.Specular = Color.White.ToVector4();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundMaterial.SpecularPower = 20;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundNode.Material = groundMaterial;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; groundMarkerNode.AddChild(groundNode);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //}<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n}<br>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Xml;\r\n\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Audio;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Content;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.GamerServices;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Graphics;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Input;\r\n<span style=\"color:blue\">using</span> Microsoft.Xna.Framework.Media;\r\n\r\n\r\n<span style=\"color:blue\">using</span> GoblinXNA;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Graphics;\r\n<span style=\"color:blue\">using</span> GoblinXNA.SceneGraph;\r\n<span style=\"color:blue\">using</span> Model = GoblinXNA.Graphics.Model;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Graphics.Geometry;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Capture;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Vision;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Vision.Marker;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Util;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Physics;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Helpers;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.iWear;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Device.Generic;\r\n<span style=\"color:blue\">using</span> GoblinXNA.Shaders;\r\n\r\n<span style=\"color:blue\">using</span> GoblinXNA.UI.UI2D;\r\n\r\n<span style=\"color:blue\">namespace</span> iwear_test\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> This is the main type for your game</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Game1 : Microsoft.Xna.Framework.Game\r\n    {\r\n        <span style=\"color:blue\">bool</span> FULL_SCREEN = <span style=\"color:blue\">false</span>;\r\n\r\n        GraphicsDeviceManager graphics;\r\n        SpriteFont sampleFont;\r\n\r\n        Scene scene;\r\n       <span style=\"color:green\">// MarkerNode groundMarkerNode;</span>\r\n        <span style=\"color:green\">//true</span>\r\n        <span style=\"color:blue\">bool</span> stereoMode = <span style=\"color:blue\">false</span>;\r\n\r\n        iWearTracker iTracker;\r\n\r\n        <span style=\"color:green\">//RenderTarget2D stereoScreenLeft;</span>\r\n        <span style=\"color:green\">//RenderTarget2D stereoScreenRight;</span>\r\n        <span style=\"color:green\">//Rectangle leftRect;</span>\r\n        <span style=\"color:green\">//Rectangle rightRect;</span>\r\n        <span style=\"color:green\">//Rectangle leftSource;</span>\r\n        <span style=\"color:green\">//Rectangle rightSource;</span>\r\n        SpriteBatch spriteBatch;\r\n        Vector3 x1;\r\n        Quaternion q1;\r\n        Vector3 t1;\r\n        <span style=\"color:green\">//string identifier;</span>\r\n\r\n<span style=\"color:green\">//float markerSize = 32.4f;</span>\r\n        <span style=\"color:blue\">public</span> Game1()\r\n        {\r\n            graphics = <span style=\"color:blue\">new</span> GraphicsDeviceManager(<span style=\"color:blue\">this</span>);\r\n            Content.RootDirectory = <span style=\"color:#a31515\">&quot;Content&quot;</span>;\r\n\r\n            <span style=\"color:green\">//full screen</span>\r\n\r\n            <span style=\"color:blue\">if</span> (FULL_SCREEN)\r\n                graphics.IsFullScreen = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                graphics.PreferredBackBufferWidth = 1280;\r\n                graphics.PreferredBackBufferHeight = 480;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Allows the game to perform any initialization it needs to before starting to run.</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> This is where it can query for any required services and load any non-graphic</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> related content.  Calling base.Initialize will enumerate through any components</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> and initialize them as well.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:green\">// TODO: Add your initialization logic here</span>\r\n\r\n            <span style=\"color:blue\">base</span>.Initialize();\r\n\r\n            <span style=\"color:green\">// Initialize the GoblinXNA framework</span>\r\n            State.InitGoblin(graphics, Content, <span style=\"color:#a31515\">&quot;&quot;</span>);\r\n\r\n            State.ThreadOption = (<span style=\"color:blue\">ushort</span>)(ThreadOptions.MarkerTracking);\r\n\r\n            <span style=\"color:green\">// Initialize the scene graph</span>\r\n            scene = <span style=\"color:blue\">new</span> Scene();\r\n            <span style=\"color:green\">// Set up the VUZIX's iWear VR920 for both stereo and orientation tracking</span>\r\n            SetupIWear();\r\n\r\n\r\n            <span style=\"color:green\">// If stereo mode is true, then setup stereo camera. If not stereo, we don't need to</span>\r\n            <span style=\"color:green\">// setup a camera since it's automatically setup by Scene when marker tracker is</span>\r\n            <span style=\"color:green\">// used. This stereo camera needs to be setup before setting up the marker tracker so</span>\r\n            <span style=\"color:green\">// the stereo camera will have correct projection matrix computed by the marker tracker.</span>\r\n            <span style=\"color:green\">//if (stereoMode)</span>\r\n               <span style=\"color:green\">// SetupStereoCamera();</span>\r\n\r\n            <span style=\"color:green\">// Set up the lights used in the scene</span>\r\n           <span style=\"color:green\">// CreateLights();</span>\r\n\r\n\r\n\r\n            <span style=\"color:green\">// Use the multi light shadow map shader for our shadow mapping</span>\r\n            <span style=\"color:green\">// NOTE: In order to use shadow mapping, you will need to add 'MultiLightShadowMap.fx'</span>\r\n            <span style=\"color:green\">// and 'SimpleShadowShader.fx' shader files to your 'Content' directory</span>\r\n            <span style=\"color:green\">//scene.ShadowMap = new MultiLightShadowMap();</span>\r\n\r\n            <span style=\"color:green\">// Create 3D objects</span>\r\n            <span style=\"color:green\">//CreateObjects();</span>\r\n            <span style=\"color:green\">// Create the ground that represents the physical ground marker array</span>\r\n            <span style=\"color:green\">//CreateGround();</span>\r\n            \r\n            <span style=\"color:green\">//State.ShowFPS = true;</span>\r\n        }\r\n        \r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> LoadContent will be called once per game and is the place to load</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> all of your content.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> LoadContent()\r\n        {\r\n            sampleFont = Content.Load&lt;SpriteFont&gt;(<span style=\"color:#a31515\">&quot;Sample&quot;</span>);\r\n\r\n            <span style=\"color:blue\">base</span>.LoadContent();\r\n            <span style=\"color:green\">// Create a new SpriteBatch, which can be used to draw textures.</span>\r\n            spriteBatch = <span style=\"color:blue\">new</span> SpriteBatch(GraphicsDevice);\r\n\r\n            <span style=\"color:green\">// TODO: use this.Content to load your game content here</span>\r\n        }\r\n\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Allows the game to run logic such as updating the world,</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> checking for collisions, gathering input, and playing audio.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;gameTime&quot;&gt;</span><span style=\"color:green\">Provides a snapshot of timing values.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Update(GameTime gameTime)\r\n        {\r\n            <span style=\"color:green\">// Allows the game to exit</span>\r\n            <span style=\"color:blue\">if</span> (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)\r\n                <span style=\"color:blue\">this</span>.Exit();\r\n            InputMapper.Instance.GetWorldTransformation(iTracker.Identifier).Decompose(<span style=\"color:blue\">out</span> x1, <span style=\"color:blue\">out</span> q1, <span style=\"color:blue\">out</span> t1);\r\n\r\n            forward = InputMapper.Instance.GetWorldTransformation(iTracker.Identifier).Forward;\r\n            <span style=\"color:green\">// TODO: Add your update logic here</span>\r\n\r\n            <span style=\"color:blue\">base</span>.Update(gameTime);\r\n        }\r\n        Vector3 forward;\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> This is called when the game should draw itself.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;gameTime&quot;&gt;</span><span style=\"color:green\">Provides a snapshot of timing values.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Draw(GameTime gameTime)\r\n        {\r\n            GraphicsDevice.Clear(Color.Azure);\r\n            spriteBatch.Begin();\r\n            <span style=\"color:green\">//spriteBatch.DrawString(sampleFont, &quot;hhhhhh&quot;, new Vector2(20, 45), Color.Black);</span>\r\n            spriteBatch.DrawString(sampleFont, forward.ToString(), <span style=\"color:blue\">new</span> Vector2(20, 45), Color.Black);\r\n            spriteBatch.DrawString(sampleFont, x1.ToString(), <span style=\"color:blue\">new</span> Vector2(20, 100), Color.Black);\r\n            spriteBatch.DrawString(sampleFont,t1.ToString(), <span style=\"color:blue\">new</span> Vector2(20, 150), Color.Black);\r\n            DrawText();\r\n            spriteBatch.End();\r\n           \r\n            <span style=\"color:green\">// TODO: Add your drawing code here</span>\r\n            scene.Draw(gameTime.ElapsedGameTime, gameTime.IsRunningSlowly);\r\n            RenderUI();\r\n            DrawText();\r\n    \r\n            <span style=\"color:blue\">base</span>.Draw(gameTime);\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SetupIWear()\r\n        {\r\n            <span style=\"color:green\">// Get an instance of iWearTracker</span>\r\n            iTracker = iWearTracker.Instance;\r\n            <span style=\"color:green\">// We need to initialize it before adding it to the InputMapper class</span>\r\n            iTracker.Initialize();\r\n            <span style=\"color:green\">// If not stereo, then we need to set the iWear VR920 to mono mode (by default, it's</span>\r\n            <span style=\"color:green\">// stereo mode if stereo is available)</span>\r\n            <span style=\"color:blue\">if</span> (stereoMode)\r\n                iTracker.EnableStereo = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:green\">// Add this iWearTracker to the InputMapper class for automatic update and disposal</span>\r\n            InputMapper.Instance.Add6DOFInputDevice(iTracker);\r\n            <span style=\"color:green\">// Re-enumerate all of the input devices so that the newly added device can be found</span>\r\n            InputMapper.Instance.Reenumerate();\r\n\r\n           <span style=\"color:green\">// identifier=iTracker.Identifier;</span>\r\n            \r\n            <span style=\"color:green\">//InputMapper.Instance.ge</span>\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> CreateObjects()\r\n        {\r\n            <span style=\"color:green\">// Create a sphere geometry</span>\r\n            {\r\n                GeometryNode sphereNode = <span style=\"color:blue\">new</span> GeometryNode(<span style=\"color:#a31515\">&quot;Sphere&quot;</span>);\r\n                sphereNode.Model = <span style=\"color:blue\">new</span> TexturedSphere(14, 20, 20);\r\n                sphereNode.Model.ShadowAttribute = ShadowAttribute.ReceiveCast;\r\n                <span style=\"color:green\">//sphereNode.Model.Shader = new SimpleShadowShader(scene.ShadowMap);</span>\r\n\r\n                Material sphereMat = <span style=\"color:blue\">new</span> Material();\r\n                sphereMat.Diffuse = Color.Red.ToVector4();\r\n                sphereMat.Specular = Color.White.ToVector4();\r\n                sphereMat.SpecularPower = 20;\r\n\r\n                sphereNode.Material = sphereMat;\r\n\r\n                TransformNode sphereTrans = <span style=\"color:blue\">new</span> TransformNode();\r\n                sphereTrans.Translation = <span style=\"color:blue\">new</span> Vector3(0, 0, 20);\r\n\r\n                <span style=\"color:green\">//groundMarkerNode.AddChild(sphereTrans);</span>\r\n                <span style=\"color:green\">//sphereTrans.AddChild(sphereNode);</span>\r\n            }\r\n\r\n            \r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SetupStereoCamera()\r\n        {\r\n            StereoCamera camera = <span style=\"color:blue\">new</span> StereoCamera();\r\n\r\n            <span style=\"color:green\">// Load the right eye view matrix from a calibration file created in StereoCameraCalibration tool</span>\r\n            Matrix cameraRightView = Matrix.Identity;\r\n            MatrixHelper.LoadMatrixFromXML(<span style=\"color:#a31515\">&quot;Wrap920_Stereo_Millimeter.xml&quot;</span>, <span style=\"color:blue\">ref</span> cameraRightView);\r\n\r\n            camera.LeftView = Matrix.CreateLookAt(Vector3.Zero, -Vector3.UnitZ, Vector3.UnitY);\r\n            camera.RightView = Matrix.Invert(cameraRightView);\r\n\r\n            CameraNode cameraNode = <span style=\"color:blue\">new</span> CameraNode(camera);\r\n\r\n            scene.RootNode.AddChild(cameraNode);\r\n            scene.CameraNode = cameraNode;\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RenderUI()\r\n        {\r\n            UI2DRenderer.WriteText(Vector2.Zero, <span style=\"color:#a31515\">&quot;Stereoscopic UI&quot;</span>, Color.Red,\r\n                sampleFont, Vector2.One, GoblinEnums.HorizontalAlignment.Center,\r\n                GoblinEnums.VerticalAlignment.Top);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> CreateLights()\r\n        {\r\n            <span style=\"color:green\">// Create a directional light source</span>\r\n            LightSource lightSource = <span style=\"color:blue\">new</span> LightSource();\r\n            lightSource.Direction = <span style=\"color:blue\">new</span> Vector3(1, -1, -1);\r\n            lightSource.Diffuse = <span style=\"color:blue\">new</span> Vector4(0.8f, 0.8f, 0.8f, 1);\r\n            lightSource.Specular = <span style=\"color:blue\">new</span> Vector4(0.6f, 0.6f, 0.6f, 1);\r\n\r\n            <span style=\"color:green\">// Create a light node to hold the light source</span>\r\n            LightNode lightNode = <span style=\"color:blue\">new</span> LightNode();\r\n            lightNode.CastShadows = <span style=\"color:blue\">true</span>;\r\n            lightNode.LightProjection = Matrix.CreatePerspectiveFieldOfView(MathHelper.PiOver4,\r\n                1, 1f, 500);\r\n            <span style=\"color:green\">// Add an ambient component</span>\r\n            lightNode.AmbientLightColor = <span style=\"color:blue\">new</span> Vector4(0.3f, 0.3f, 0.3f, 1);\r\n            lightNode.LightSource = lightSource;\r\n\r\n            <span style=\"color:green\">// Add this light node to the root node</span>\r\n            <span style=\"color:green\">//groundMarkerNode.AddChild(lightNode);</span>\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> DrawText()\r\n        {\r\n           <span style=\"color:green\">// spriteBatch.DrawString(sampleFont, &quot;Cannon power: 100&quot;, new Vector2(20, 45), Color.White);</span>\r\n        }\r\n        <span style=\"color:green\">//private void CreateGround()</span>\r\n        <span style=\"color:green\">//{</span>\r\n        <span style=\"color:green\">//    GeometryNode groundNode = new GeometryNode(&quot;Ground&quot;);</span>\r\n\r\n        <span style=\"color:green\">//    groundNode.Model = new TexturedBox(340, 200, 0.1f);</span>\r\n\r\n        <span style=\"color:green\">//    // Set this ground model to act as an occluder so that it appears transparent</span>\r\n        <span style=\"color:green\">//    groundNode.IsOccluder = true;</span>\r\n\r\n        <span style=\"color:green\">//    // Make the ground model to receive shadow casted by other objects with</span>\r\n        <span style=\"color:green\">//    // CastShadows set to true</span>\r\n        <span style=\"color:green\">//    groundNode.Model.ShadowAttribute = ShadowAttribute.ReceiveOnly;</span>\r\n        <span style=\"color:green\">//    groundNode.Model.Shader = new SimpleShadowShader(scene.ShadowMap);</span>\r\n\r\n        <span style=\"color:green\">//    Material groundMaterial = new Material();</span>\r\n        <span style=\"color:green\">//    groundMaterial.Diffuse = new Vector4(0.5f, 0.5f, 0.5f, 0.5f);</span>\r\n        <span style=\"color:green\">//    groundMaterial.Specular = Color.White.ToVector4();</span>\r\n        <span style=\"color:green\">//    groundMaterial.SpecularPower = 20;</span>\r\n\r\n        <span style=\"color:green\">//    groundNode.Material = groundMaterial;</span>\r\n\r\n        <span style=\"color:green\">//    groundMarkerNode.AddChild(groundNode);</span>\r\n        <span style=\"color:green\">//}</span>\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2012-10-09T05:09:43.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924202",
    "ThreadId": "398659",
    "Html": "<p>VR920 or Wrap920 AR? First of all, you will need to install VR Manager from Vuzix. VR920 has embedded tracker, but Wrap920 AR needs an external tracker so if you don't have it (it's a separate hardware), then you won't get any tracking data.</p>\r\n<p>Ohan</p>",
    "PostedDate": "2012-10-09T11:40:29.307-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924249",
    "ThreadId": "398659",
    "Html": "<p>thanks Ohan for reply</p>\r\n<p>but I want to make a xna game that use wrap 920 vr so i want to get pitch, yaw, and roll to change camera of game depend on it .</p>\r\n<p>can you help me how to get that information.</p>",
    "PostedDate": "2012-10-09T12:56:24.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924334",
    "ThreadId": "398659",
    "Html": "<p>It has nothing to do with XNA. I'm asking whether you installed their driver &amp; tracker properly. There is no Wrap920VR. It's either VR920 or Wrap920AR. See my comment carefully again.</p>\r\n<p>Ohan</p>",
    "PostedDate": "2012-10-09T16:15:54.15-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924563",
    "ThreadId": "398659",
    "Html": "<p>yes i have installed the driver and the tracker and when i open the VR manager it reads the data from the glasses</p>",
    "PostedDate": "2012-10-10T02:34:11.887-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "955278",
    "ThreadId": "398659",
    "Html": "\r\n<p>in my case, i have&nbsp;<span>Wrap920 AR and&nbsp;<span>external tracker , has isntalled driver and sdk but the device dont register information of pich yaw or roll,</span></span></p>\r\n<p><span><span>i acces to them use&nbsp;pich = iWearTracker.Instance.Pitch;.</span></span></p>\r\n<p><span><span>plis help me</span></span></p>\r\n",
    "PostedDate": "2012-12-12T12:30:09.903-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
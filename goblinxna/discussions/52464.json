[
  {
    "Id": "176309",
    "ThreadId": "52464",
    "Html": "A bug of SceneGraphDisplay has been fixed, and the fixed version SceneGraphDisplay1.0.1 has been uploaded. <div><br></div><div>It used to have problem displaying nodes attached to MarkerNode, but now they are correctly displayed. </div><div><br></div><div>Ohan</div>",
    "PostedDate": "2009-04-06T13:57:43.983-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "182730",
    "ThreadId": "52464",
    "Html": "Hi!<br>\r\nI downloaded the tool and was trying to include it in my project and in tutorial2 of Goblin, but i didn't manage to do it.<br>\r\n<br>\r\nI followed the instructions in the user manual, but all I get is a bunch of nullpointerexceptions:<br>\r\n<br>\r\nA first chance exception of type 'System.NullReferenceException' occurred in SceneGraphDisplay.dll<br>\r\nA first chance exception of type 'System.ArgumentNullException' occurred in System.Windows.Forms.dll<br>\r\nA first chance exception of type 'System.ArgumentNullException' occurred in System.Windows.Forms.dll<br>\r\nA first chance exception of type 'System.ArgumentNullException' occurred in System.Windows.Forms.dll<br>\r\n<br>\r\nand it just goes on with these errors.<br>\r\n<br>\r\nHas it happened to anyone?<br>\r\n<br>\r\nThanks,<br>\r\n<br>\r\nLaetitia Mendes<br>\r\n",
    "PostedDate": "2009-04-23T04:26:20.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "183785",
    "ThreadId": "52464",
    "Html": "I've never seen first chance exception. What is your computer's specs? Can you run other XNA-only programs?",
    "PostedDate": "2009-04-26T10:04:00.903-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "184503",
    "ThreadId": "52464",
    "Html": "I have an Intel Core 2 Duo,, 2.5GHz, 4GB RAM, WIndows Vista.<br>\r\n<br>\r\nevery XNA example runs perfectly.<br>\r\nI was wondering, do you have a simple example working , so I can compare? Maybe something is misplaced, or some spetial configurations is needed.<br>\r\n<br>\r\nThanks a lot (once again)<br>\r\n<br>\r\nLaetitita Mendes<br>\r\n",
    "PostedDate": "2009-04-28T06:13:37.643-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "185102",
    "ThreadId": "52464",
    "Html": "I've attached the code for modified Tutorial2 that uses the SceneGraphDisplay tool.<div><br></div><div>Hope this helps.</div><div><br></div><div>Ohan</div><div><br></div><div>-----------------------------------------------------------------------------------------</div><div><br></div><div><div>public class Tutorial2 : Microsoft.Xna.Framework.Game</div><div>    {</div><div>        GraphicsDeviceManager graphics;</div><div><br></div><div>        // A scene graph used to render virtual reality</div><div>        Scene scene;</div><div><br></div><div>        TransformNode torusTransParentNode;</div><div>        TransformNode shipTransParentNode;</div><div><br></div><div>        SpriteFont textFont;</div><div><br></div><div>        SGForm fs;</div><div><br></div><div>        // Boolean value to indicate whether 1st or 2nd animation sequence</div><div>        bool firstAnimation = true;</div><div>        double shipAngle = 0;</div><div>        double toriAngle = 0;</div><div><br></div><div>        public Tutorial2()</div><div>        {</div><div>            graphics = new GraphicsDeviceManager(this);</div><div>            Content.RootDirectory = &quot;Content&quot;;</div><div>        }</div><div><br></div><div>        /// &lt;summary&gt;</div><div>        /// Allows the game to perform any initialization it needs to before starting to run.</div><div>        /// This is where it can query for any required services and load any non-graphic</div><div>        /// related content.  Calling base.Initialize will enumerate through any components</div><div>        /// and initialize them as well.</div><div>        /// &lt;/summary&gt;</div><div>        protected override void Initialize()</div><div>        {</div><div>            // Display the mouse cursor</div><div>            this.IsMouseVisible = true;</div><div><br></div><div>            // Initialize the GoblinXNA framework</div><div>            State.InitGoblin(graphics, Content, &quot;&quot;);</div><div><br></div><div>            // Initialize the scene graph</div><div>            scene = new Scene(this);</div><div><br></div><div>            // Set the background color to CornflowerBlue color. </div><div>            // GraphicsDevice.Clear(...) is called by Scene object with this color. </div><div>            scene.BackgroundColor = Color.CornflowerBlue;</div><div><br></div><div>            // Set up the lights used in the scene</div><div>            CreateLights();</div><div><br></div><div>            // Set up the camera which defines the eye location and viewing frustum</div><div>            CreateCamera();</div><div><br></div><div>            // Create 3D objects</div><div>            CreateObjects();</div><div><br></div><div>            // Use per pixel lighting for better quality (If you using non NVidia graphics card,</div><div>            // setting this to true may reduce the performance significantly)</div><div>            scene.PreferPerPixelLighting = true;</div><div><br></div><div>            // Add a keyboard press handler for user input</div><div>            KeyboardInput.Instance.KeyPressEvent += new HandleKeyPress(KeyPressHandler);</div><div><br></div><div>            base.Initialize();</div><div>        }</div><div><br></div><div>        private void CreateLights()</div><div>        {</div><div>            // Create two directional light sources</div><div>            LightSource lightSource1 = new LightSource();</div><div>            lightSource1.Direction = new Vector3(-1, -1, -1);</div><div>            lightSource1.Diffuse = Color.White.ToVector4();</div><div>            lightSource1.Specular = new Vector4(0.6f, 0.6f, 0.6f, 1);</div><div><br></div><div>            LightSource lightSource2 = new LightSource();</div><div>            lightSource2.Direction = new Vector3(0, 1, 0);</div><div>            lightSource2.Diffuse = Color.White.ToVector4()*.2f;</div><div>            lightSource2.Specular = new Vector4(0.2f, 0.2f, 0.2f, 1);</div><div><br></div><div>            // Create a light node to hold the light sources</div><div>            LightNode lightNode = new LightNode();</div><div>            lightNode.LightSources.Add(lightSource1);</div><div>            lightNode.LightSources.Add(lightSource2);</div><div><br></div><div>            // Add this light node to the root node</div><div>            scene.RootNode.AddChild(lightNode);</div><div>        }</div><div><br></div><div>        private void CreateCamera()</div><div>        {</div><div>            // Create a camera</div><div>            Camera camera = new Camera();</div><div>            // Put the camera at (-6, 0, 4)</div><div>            camera.Translation = new Vector3(-6, 0, 4);</div><div>            // Rotate the camera -20 degrees about the Y axis</div><div>            camera.Rotation = Quaternion.CreateFromAxisAngle(new Vector3(0, 1, 0),</div><div>                MathHelper.ToRadians(-20));</div><div>            // Set the vertical field of view to be 60 degrees</div><div>            camera.FieldOfViewY = MathHelper.ToRadians(60);</div><div>            // Set the near clipping plane to be 0.1f unit away from the camera</div><div>            camera.ZNearPlane = 0.1f;</div><div>            // Set the far clipping plane to be 1000 units away from the camera</div><div>            camera.ZFarPlane = 1000;</div><div><br></div><div>            // Now assign this camera to a camera node, and add this camera node to our scene graph</div><div>            CameraNode cameraNode = new CameraNode(camera);</div><div>            scene.RootNode.AddChild(cameraNode);</div><div><br></div><div>            // Assign the camera node to be our scene graph's current camera node</div><div>            scene.CameraNode = cameraNode;</div><div>        }</div><div><br></div><div>        private void CreateObjects()</div><div>        {</div><div>            // Loads a textured model of a ship</div><div>            ModelLoader loader = new ModelLoader();</div><div>            Model shipModel = (Model)loader.Load(&quot;&quot;, &quot;p1_wedge&quot;);</div><div><br></div><div>            // Create a geometry node of a loaded ship model</div><div>            GeometryNode shipNode = new GeometryNode(&quot;Ship&quot;);</div><div>            shipNode.Model = shipModel;</div><div>            // This ship model has material definitions in the model file, so instead</div><div>            // of creating a material node for this ship model, we simply use its internal materials</div><div>            shipNode.Model.UseInternalMaterials = true;</div><div><br></div><div>            // Create a transform node to define the transformation for the ship</div><div>            TransformNode shipTransNode = new TransformNode();</div><div>            shipTransNode.Translation = new Vector3(0, 5, -12); </div><div>            shipTransNode.Scale = new Vector3(0.002f, 0.002f, 0.002f); // It's huge!</div><div>            shipTransNode.Rotation = Quaternion.CreateFromAxisAngle(new Vector3(0, 1, 0),</div><div>                MathHelper.ToRadians(90));</div><div><br></div><div>            shipTransParentNode = new TransformNode();</div><div>            shipTransParentNode.Translation = Vector3.Zero;</div><div><br></div><div>            // Create a torus model and assign it to two geometry nodes</div><div>            Model torusModel = (Model)loader.Load(&quot;&quot;, &quot;torus&quot;);// new Torus(2.2f, 3.5f, 30, 30);</div><div> </div><div>            GeometryNode torusNode1 = new GeometryNode(&quot;Torus1&quot;);</div><div>            torusNode1.Model = torusModel;</div><div>  </div><div>            GeometryNode torusNode2 = new GeometryNode(&quot;Torus2&quot;);</div><div>            torusNode2.Model = torusModel;</div><div><br></div><div>            // Create transform node for these two torus models</div><div>            TransformNode torusTransNode1 = new TransformNode();</div><div>            torusTransNode1.Translation = new Vector3(5, 0, -12);</div><div><br></div><div>            TransformNode torusTransNode2 = new TransformNode();</div><div>            torusTransNode2.Translation = new Vector3(-5, 0, -12);</div><div><br></div><div>            torusTransParentNode = new TransformNode();</div><div>            torusTransParentNode.Translation = Vector3.Zero;</div><div><br></div><div>            // Create a material node for these two torus models</div><div>            Material torusMaterial = new Material();</div><div>            torusMaterial.Diffuse = Color.DarkGoldenrod.ToVector4();</div><div>            torusMaterial.Specular = Color.White.ToVector4();</div><div>            torusMaterial.SpecularPower = 5;</div><div><br></div><div>            // Now apply this material to these two torus models</div><div>            torusNode1.Material = torusMaterial;</div><div>            torusNode2.Material = torusMaterial;</div><div><br></div><div>            // Now add the above nodes to the scene graph in appropriate order</div><div>            scene.RootNode.AddChild(shipTransParentNode);</div><div>            shipTransParentNode.AddChild(shipTransNode);</div><div>            shipTransNode.AddChild(shipNode);</div><div><br></div><div>            scene.RootNode.AddChild(torusTransParentNode);</div><div>            torusTransParentNode.AddChild(torusTransNode1);</div><div>            torusTransParentNode.AddChild(torusTransNode2);</div><div>            torusTransNode1.AddChild(torusNode1);</div><div>            torusTransNode2.AddChild(torusNode2);</div><div>        }</div><div><br></div><div>        private void KeyPressHandler(Keys keys, KeyModifier modifier)</div><div>        {</div><div>            // Detect key press &quot;a&quot; (with or without a modifier) and toggle the animation</div><div>            if (keys == Keys.A)</div><div>                firstAnimation = !firstAnimation;</div><div><br></div><div>            if (keys == Keys.S)</div><div>            {</div><div>                fs = new SGForm(scene);</div><div>                MouseInput.Instance.MouseClickEvent += new HandleMouseClick(fs.SG_MouseClickHandler);</div><div>                fs.RunTool();</div><div>                fs.Visible = true;</div><div>            }</div><div>        }</div><div><br></div><div>        /// &lt;summary&gt;</div><div>        /// LoadContent will be called once per game and is the place to load</div><div>        /// all of your content.</div><div>        /// &lt;/summary&gt;</div><div>        protected override void LoadContent()</div><div>        {</div><div>            textFont = Content.Load&lt;SpriteFont&gt;(&quot;Sample&quot;);</div><div>        }</div><div><br></div><div>        /// &lt;summary&gt;</div><div>        /// UnloadContent will be called once per game and is the place to unload</div><div>        /// all content.</div><div>        /// &lt;/summary&gt;</div><div>        protected override void UnloadContent()</div><div>        {</div><div>            Content.Unload();</div><div>        }</div><div><br></div><div>        /// &lt;summary&gt;</div><div>        /// Allows the game to run logic such as updating the world,</div><div>        /// checking for collisions, gathering input, and playing audio.</div><div>        /// &lt;/summary&gt;</div><div>        /// &lt;param name=&quot;gameTime&quot;&gt;Provides a snapshot of timing values.&lt;/param&gt;</div><div>        protected override void Update(GameTime gameTime)</div><div>        {</div><div>            if (firstAnimation)</div><div>            {</div><div>                shipAngle += gameTime.ElapsedGameTime.TotalSeconds;</div><div>                // Rotate the ship model about the origin along Z axis</div><div>                shipTransParentNode.Rotation = Quaternion.CreateFromAxisAngle(Vector3.UnitZ, </div><div>                    (float)shipAngle);</div><div>            }</div><div>            else</div><div>            {</div><div>                toriAngle += gameTime.ElapsedGameTime.TotalSeconds;</div><div>                // Rotate the two torus models about the origin along Z axis</div><div>                torusTransParentNode.Rotation = Quaternion.CreateFromAxisAngle(Vector3.UnitZ,</div><div>                    (float)toriAngle);</div><div>            }</div><div><br></div><div>            base.Update(gameTime);</div><div>        }</div><div><br></div><div>        /// &lt;summary&gt;</div><div>        /// This is called when the game should draw itself.</div><div>        /// &lt;/summary&gt;</div><div>        /// &lt;param name=&quot;gameTime&quot;&gt;Provides a snapshot of timing values.&lt;/param&gt;</div><div>        protected override void Draw(GameTime gameTime)</div><div>        {</div><div>            base.Draw(gameTime);</div><div><br></div><div>            if (fs != null)</div><div>                fs.UpdatePickedObjectDrawing();</div><div><br></div><div>            // Draw a 2D text string at the center of the screen</div><div>            UI2DRenderer.WriteText(Vector2.Zero, &quot;Press 'A' to toggle the animation!!&quot;, Color.GreenYellow,</div><div>                textFont);</div><div>        }</div><div>    }</div></div>",
    "PostedDate": "2009-04-29T10:42:00.84-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "185138",
    "ThreadId": "52464",
    "Html": "<span style=\"font-size:11pt;font-family:'calibri','sans-serif';color:#1f497d\">It\r\ndoes!!!</span>\r\n<p><span style=\"font-size:11pt;font-family:'calibri','sans-serif';color:#1f497d\">I mean, I still dont know what the problem was, but at least i have an example working!</span></p>\r\n<p> <span style=\"font-size:11pt;font-family:'calibri','sans-serif';color:#1f497d\"></span></p>\r\n<p><span style=\"font-size:11pt;font-family:'calibri','sans-serif';color:#1f497d\">Thanks very much =)</span></p>\r\n<p> <span style=\"font-size:11pt;font-family:'calibri','sans-serif';color:#1f497d\"></span></p>\r\n<p><span style=\"font-size:11pt;font-family:'calibri','sans-serif';color:#1f497d\">Laetitia Mendes<br>\r\n</span></p>\r\n",
    "PostedDate": "2009-04-29T11:43:38.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
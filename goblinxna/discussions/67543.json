[
  {
    "Id": "229577",
    "ThreadId": "67543",
    "Html": "<p>Hi Ohan,</p>\r\n<p>I've tried to add a robot model exported from 3D studio as a .fbx file, but when I change its scale, only the bounding box for collision detection changes, the model still appears with its original size. Is there anything wrong with my code?</p>\r\n<p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static Robot AddRobot(Scene scene, MarkerNode groundMarkerNode, ContentManager Content)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModelLoader loader = new ModelLoader();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Model robotModel = (Model)loader.Load(&quot;&quot;, &quot;robot&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GeometryNode robotNode = new GeometryNode(&quot;Robot&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robotNode.Model = robotModel;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robotNode.Model.UseInternalMaterials = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robotNode.Model.CastShadows = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robotNode.Model.ReceiveShadows = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NewtonPhysics physicsEngine = (NewtonPhysics)scene.PhysicsEngine;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Robot robot = new Robot(robotNode, physicsEngine);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 4; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robot.Tires[i] = CreateTire((TireID)Enum.ToObject(typeof(TireID), i), robot.TireTransformNode[i], robotNode, scene.PhysicsEngine.Gravity);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robot.Collidable = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robot.Interactable = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robotNode.Physics = robot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robotNode.Physics.NeverDeactivate = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; robotNode.AddToPhysicsEngine = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TransformNode transNode = new TransformNode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transNode.Translation = new Vector3(15, 50, 35);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transNode.Scale = new Vector3(100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transNode.Rotation = Quaternion.CreateFromAxisAngle(Vector3.UnitX, MathHelper.ToRadians(90)) * Quaternion.CreateFromAxisAngle(Vector3.UnitY, MathHelper.ToRadians(90));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundMarkerNode.AddChild(transNode);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transNode.AddChild(robotNode);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Newton.NewtonSetBodyLeaveWorldEvent(physicsEngine.NewtonWorld, robot.LeaveWorldCallback);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return robot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>",
    "PostedDate": "2009-08-31T22:31:59.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "230488",
    "ThreadId": "67543",
    "Html": "<p>Hi,</p>\r\n<p>Please send me the entire project so I can take look at it. The model scaling works fine for me, so I don't know what's wrong with yours.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n<p>Ohan</p>",
    "PostedDate": "2009-09-02T19:46:04.343-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "230881",
    "ThreadId": "67543",
    "Html": "<p>Hi Ohan,</p>\r\n<p>Since my project works with different classes and different files, it would be easier if i send you my project attached to an email. Do you have an email address where I can send you my entire project?</p>\r\n<p>I tried to scale different models also, some of then works just fine, but others I found the same problem. I was wondering if this issue with model scaling has any connection with the 3D Studio Max fbx exporter.</p>\r\n<p>Thanks</p>\r\n<p>Emerson</p>",
    "PostedDate": "2009-09-03T14:07:45.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "231141",
    "ThreadId": "67543",
    "Html": "<p>Hi Emerson,</p>\r\n<p>Hmm... Interesting. I'm wondering if you can scale those models in pure XNA code (without using Goblin). If you Goblin's Model class's Render method, it simply iterates throught each of the loaded ModelMeshPart, and pass the vertices &amp; indices information to the shader, so it should be able to scale for any .fbx models.</p>\r\n<p>Please send your zipped project to ohan@cs.columbia.edu and please make sure to zip it with a password like &quot;123&quot; (my cs email is forwarded to my gmail and gmail doesn't like any .dll or .exe files, with the password, gmail can't check the contents of the zip file).</p>\r\n<p>I'm quite busy with the preparation for next Goblin release (v3.3) which includes a new marker tracking support, so I don't know when exactly I will be able to check the problem though...&nbsp;</p>\r\n<p>Thanks</p>",
    "PostedDate": "2009-09-04T07:14:43.643-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]
[
  {
    "Id": "481389",
    "ThreadId": "223823",
    "Html": "<p><strong>I have added one ground on Marker detection.. Code Below..</strong></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GeometryNode groundNode = new GeometryNode(&quot;Ground&quot;);<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModelLoader aloader = new ModelLoader();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GoblinXNA.Graphics.Model animatedModel = (GoblinXNA.Graphics.Model)aloader.Load(&quot;&quot;, &quot;SeaFresh&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animatedModel.UseInternalMaterials = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.Model = animatedModel;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //animatedModel.ShaderTechnique = &quot;SkinnedModelTechnique&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //animatedModel.LoadAnimationClip(&quot;Take 001&quot;);<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set this ground model to act as an occluder so that it appears transparent<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.IsOccluder = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Make the ground model to receive shadow casted by other objects with<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // CastShadows set to true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.Model.ReceiveShadows = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Material groundMaterial = new Material();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //groundMaterial.Diffuse = Color.Gray.ToVector4();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //groundMaterial.Specular = Color.White.ToVector4();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundMaterial.SpecularPower = 20;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //groundNode.Physics.Interactable = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.Physics.Collidable = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //groundNode.Physics.Shape = GoblinXNA.Physics.ShapeType.Box;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.AddToPhysicsEngine = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.Physics.Mass = 10000;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a parent transformation for both the ground and the sphere models<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parentTransNode = new TransformNode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parentTransNode.Translation = new Vector3(0, 0, 0);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a scale transformation for the ground to make it bigger<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TransformNode groundScaleNode = new TransformNode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundScaleNode.Scale = new Vector3(0.5f, 0.5f, 0.5f);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundScaleNode.Rotation = Quaternion.CreateFromAxisAngle(new Vector3(20, 0, 0), MathHelper.ToRadians(3));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundScaleNode.Translation = new Vector3(0.1f, -15f, -1f);<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] ids = new int[28];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; ids.Length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ids[i] = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundMarkerNode = new MarkerNode(scene.MarkerTracker, &quot;ALVARGroundArray.txt&quot;, ids);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.Material = groundMaterial;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundNode.Physics.MaterialName = &quot;Ground&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scene.RootNode.AddChild(groundMarkerNode);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundMarkerNode.AddChild(parentTransNode);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parentTransNode.AddChild(groundScaleNode);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groundScaleNode.AddChild(groundNode);</p>\r\n<p>&nbsp;</p>\r\n<p><strong>I am trying to shoot a Ball on it... Code Below</strong></p>\r\n<p>Material shooterMat = new Material();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shooterMat.Diffuse = Color.Black.ToVector4();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shooterMat.Specular = Color.Yellow.ToVector4();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //shooterMat.SpecularPower = 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sphere sphereModel = new Sphere(3f, 20, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox = new GeometryNode(&quot;ShooterBox&quot; + shooterID++);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Model = sphereModel;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Material = shooterMat;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Physics.Interactable = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Physics.MaterialName = &quot;ShooterBox&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Physics.Collidable = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Physics.Shape = GoblinXNA.Physics.ShapeType.Sphere;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Physics.Mass = 100f;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.AddToPhysicsEngine = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calculate the direction to shoot the box based on the near and far point<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 linVel = far - near;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; linVel.Normalize();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Multiply the direction with the velocity of 20<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; linVel *= 200f;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Assign the initial velocity to this shooting box<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Physics.InitialLinearVelocity = linVel;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //shootBox.Physics.InitialAngularVelocity = new Vector3(0.1f, 0.1f, 100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shootBox.Physics.InitialWorldTransform = Matrix.CreateTranslation(near);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scene.RootNode.AddChild(shootBox);</p>\r\n<p><strong>But the ball passes through.. Collision is not happening...&nbsp; Trying to detect collision from the below code..</strong></p>\r\n<p>NewtonMaterial physMat = new NewtonMaterial();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; physMat.MaterialName1 = &quot;ShooterBox&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; physMat.MaterialName2 = &quot;Ground&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; physMat.Elasticity = 0.7f;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; physMat.StaticFriction = 0.8f;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; physMat.KineticFriction = 0.2f;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; physMat.ContactProcessCallback = delegate(Vector3 contactPosition, Vector3 contactNormal,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float contactSpeed, float colObj1ContactTangentSpeed, float colObj2ContactTangentSpeed,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Vector3 colObj1ContactTangentDirection, Vector3 colObj2ContactTangentDirection)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (contactSpeed &gt; 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; collisionCount++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (collisionCount &gt;= 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; Code After collision..<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-08-17T06:28:27.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "483845",
    "ThreadId": "223823",
    "Html": "<p>The collision won't happen because the marker transformation will not be applied to the position and orientation in the physics world by design.&nbsp;</p>\r\n<p>To correlate the physics world with marker transformation, you will need to set the transform of the tracked object by marker (in this case, the ground) directly in the physics engine like what I do in Tutorial 8. Also, moving a physics object based on marker transformation means that you'll be &quot;transporting&quot; the object, and you will see sometimes that the ball will go through the ground because it is not a desirable behavior. Unfortunately, Newton 1.53 does not support a way to correctly move objects in the physics simulation by telling it the new transformation of an object, but Havok physics can perform this kind of operation correctly. Havok physics will be supported in the next release, which will be when XNA 4 official release comes out.</p>\r\n<p>Ohan</p>",
    "PostedDate": "2010-08-23T16:31:46.513-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "532813",
    "ThreadId": "223823",
    "Html": "\r\n<p>Hello ohanoda</p>\r\n<p>I've seen your Marble-Game (http://www.youtube.com/watch?v=6AKgH4On65A) and plan to create a similar game. But as mentioned in this thread, the marble tends to fall through the ground plane while moving (especially while rotating) the marker. The transformation\r\n of the ground is done directly in the physics engine, as you recommended.</p>\r\n<p>I gave the Havok Wrapper in Goblin 3.5 a try, but since this wrapper is very limited and no interaction between marble and ground takes place at all when using it, I hope to solve this with Newton Physics.</p>\r\n<p>your marble game uses the newton engine without this problem, maybe you have an idea for this?</p>\r\n<p>thanks in advance for your reply</p>\r\n",
    "PostedDate": "2010-12-08T04:56:06.4-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "533503",
    "ThreadId": "223823",
    "Html": "\r\n<p>It is likely that your ground is too &quot;thin&quot; compared to the size of the ball. I'm using Newton for the marble game, but since Newton is using discrete simulation, there is a possibility that the ball misses the collision if the physics update interval is\r\n somewhat large, so you want to make the ground thick enough that it will have less chance of missing the collision.</p>\r\n<p>Ohan</p>\r\n",
    "PostedDate": "2010-12-09T09:08:20.65-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "533594",
    "ThreadId": "223823",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>ohanoda wrote:</strong><br>\r\n<p>It is likely that your ground is too &quot;thin&quot; compared to the size of the ball. I'm using Newton for the marble game, but since Newton is using discrete simulation, there is a possibility that the ball misses the collision if the physics update interval is\r\n somewhat large, so you want to make the ground thick enough that it will have less chance of missing the collision.</p>\r\n<p>Ohan</p>\r\n</blockquote>\r\n<p>thank you for your fast reply! If I increase the ground thickness, the problem still exists but occurs much more seldom.</p>\r\n<p>And is there any possibility to make the physics update interval smaller?</p>\r\n",
    "PostedDate": "2010-12-09T12:22:43.897-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "533666",
    "ThreadId": "223823",
    "Html": "\r\n<p>There is a property called NewtonPhysics.SimulationTimeStep, which controls the update interval. If you change this, you may also want to change MaxSimulationSubSteps property so that the update won't look slow. Please see the API doc for details.</p>\r\n<p>Ohan</p>\r\n",
    "PostedDate": "2010-12-09T14:48:21.78-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]
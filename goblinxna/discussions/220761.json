[
  {
    "Id": "471074",
    "ThreadId": "220761",
    "Html": "<p>Hi,<br> I am using Goblin XNA and trying to show video file on the Marker thru Augmented Reality. I am able to hear only sound of the Video ..</p>\r\n<p>My Code is as follows:<br> <br> ------------------------------------------------------------------------------<br> <br> using System;<br> using System.Collections.Generic;<br> using System.Linq;<br> using Microsoft.Xna.Framework;<br> using Microsoft.Xna.Framework.Audio;<br> using Microsoft.Xna.Framework.Content;<br> using Microsoft.Xna.Framework.GamerServices;<br> using Microsoft.Xna.Framework.Graphics;<br> using Microsoft.Xna.Framework.Input;<br> using Microsoft.Xna.Framework.Media;<br> using Microsoft.Xna.Framework.Net;<br> using Microsoft.Xna.Framework.Storage;<br> using GoblinXNA.SceneGraph;<br> using GoblinXNA.Graphics;<br> using GoblinXNA;<br> using GoblinXNA.Device.Capture;<br> using GoblinXNA.Device.Vision.Marker;<br> using GoblinXNA.Graphics.Geometry;<br> using GoblinXNA.Physics;<br> using GoblinXNA.Sounds;<br> using GoblinXNA.UI.UI2D;<br> <br> namespace AnimatedXNA_AR<br> {<br> /// &lt;summary&gt;<br> /// This is the main type for your game<br> /// &lt;/summary&gt;<br> public class AnimatedGame : Microsoft.Xna.Framework.Game<br> {<br> GraphicsDeviceManager graphics;<br> <br> Scene scene;<br> <br> Video video;<br> VideoPlayer player;<br> Texture2D videoTexture;<br> <br> <br> AnimatedModel animatedModel;<br> TransformNode modelTransNode;<br> float elapsedTime = 0;<br> MarkerNode groundMarkerNode, toolbarMarkerNode;<br> GeometryNode modelNode;<br> GeometryNode groundNode;<br> <br> public AnimatedGame()<br> {<br> graphics = new GraphicsDeviceManager(this);<br> Content.RootDirectory = &quot;Content&quot;;<br> <br> }<br> <br> <br> <br> /// &lt;summary&gt;<br> /// Allows the game to perform any initialization it needs to before starting to run.<br> /// This is where it can query for any required services and load any non-graphic<br> /// related content.  Calling base.Initialize will enumerate through any components<br> /// and initialize them as well.<br> /// &lt;/summary&gt;<br> protected override void Initialize()<br> {<br> // Initialize the GoblinXNA framework<br> State.InitGoblin(graphics, Content, &quot;&quot;);<br> <br> // Initialize the scene graph<br> scene = new Scene(this);<br> <br> #if !USE_ARTAG<br> State.ThreadOption = (ushort)ThreadOptions.MarkerTracking;<br> #endif<br> // Use the newton physics engine to perform collision detection<br> scene.PhysicsEngine = new NewtonPhysics();<br> <br> <br> <br> <br> // Use per pixel lighting for better quality (If you using non NVidia graphics card,<br> // setting this to true may reduce the performance significantly)<br> scene.PreferPerPixelLighting = true;<br> // Make the physics simulation space larger <br> // to 500x500x500 centered at the origin<br> ((NewtonPhysics)scene.PhysicsEngine).WorldSize =<br> new BoundingBox(Vector3.One * -250, Vector3.One * 250);<br> // Increase the gravity<br> scene.PhysicsEngine.Gravity = 30.0f;<br> <br> ((NewtonPhysics)scene.PhysicsEngine).MaxSimulationSubSteps = 5;<br> <br> // Set up the camera, which defines the eye location and viewing frustum<br> //CreateCamera();<br> SetupMarkerTracking();<br> <br> // Set up the lights used in the scene<br> CreateLights();<br> <br> <br> <br> GoblinXNA.Graphics.Model m = new GoblinXNA.Graphics.Model();<br> spriteBatch = new SpriteBatch(GraphicsDevice);<br> <br> video = Content.Load&lt;Video&gt;(&quot;Bear&quot;);<br> player = new VideoPlayer();<br> <br> //CreateGround();<br> <br> <br> // Create a ground for the skinned model to walk around<br> <br> LoadVideo();<br> <br> <br> <br> // Use per pixel lighting for better quality (If you using non NVidia graphics card,<br> // setting this to true may reduce the performance significantly)<br> scene.PreferPerPixelLighting = true;<br> <br> State.ShowFPS = true;<br> <br> base.Initialize();<br> }<br> <br> private void LoadVideo()<br> {<br> <br> if (player.State == MediaState.Stopped)<br> {<br> player.IsLooped = false;<br> player.Play(video);<br> }<br> <br> player.Stop();<br> <br> GeometryNode videoNode = new GeometryNode(&quot;Ground&quot;);<br> videoNode.Model = new Box(80, 80, 0.1f);<br> <br> Material dominoMaterial = new Material();<br> dominoMaterial.Diffuse = new Vector4(1.5f, 1.5f, 1.5f, 1.0f);<br> dominoMaterial.Specular = Color.White.ToVector4();<br> dominoMaterial.SpecularPower = 10;<br> <br> modelTransNode = new TransformNode();<br> modelTransNode.Translation = new Vector3(0, 0, 0);<br> modelTransNode.Scale = new Vector3(0.5f, 0.5f, 0.5f);<br> modelTransNode.Rotation = Quaternion.CreateFromAxisAngle(new Vector3(5, 5, 5), MathHelper.ToRadians(10));<br> <br> #if USE_ARTAG<br> groundMarkerNode = new MarkerNode(scene.MarkerTracker, &quot;ground&quot;);<br> #else<br> // Create an array to hold a list of marker IDs that are used in the marker<br> // array configuration (even though these are already specified in the configuration<br> // file, ALVAR still requires this array)<br> int[] ids = new int[28];<br> for (int i = 0; i &lt; ids.Length; i++)<br> ids[i] = i;<br> <br> groundMarkerNode = new MarkerNode(scene.MarkerTracker, &quot;ALVARGroundArray.txt&quot;, ids);<br> #endif<br> <br> if (player != null)<br> {<br> if (player.State != MediaState.Stopped)<br> {<br> videoTexture = player.GetTexture();<br> }<br> }<br> <br> dominoMaterial.Texture = player.GetTexture(); <br> videoNode.Material = dominoMaterial;<br> <br> <br> scene.RootNode.AddChild(groundMarkerNode);<br> groundMarkerNode.AddChild(modelTransNode);<br> modelTransNode.AddChild(videoNode);<br> <br> }<br> <br> <br> <br> <br> private void SetupMarkerTracking()<br> {<br> // Create our video capture device that uses DirectShow library. Note that <br> // the combinations of resolution and frame rate that are allowed depend on <br> // the particular video capture device. Thus, setting incorrect resolution <br> // and frame rate values may cause exceptions or simply be ignored, depending <br> // on the device driver.  The values set here will work for a Microsoft VX 6000, <br> // and many other webcams.<br> IVideoCapture captureDevice = null;<br> <br> //if (useStaticImage)<br> //{<br> //    captureDevice = new NullCapture();<br> //    captureDevice.InitVideoCapture(0, FrameRate._30Hz, Resolution._800x600,<br> //        ImageFormat.R8G8B8_24, false);<br> <br> //    ((NullCapture)captureDevice).StaticImageFile = &quot;testImage800x600.jpg&quot;;<br> //}<br> //else<br> //{<br> captureDevice = new DirectShowCapture();<br> captureDevice.InitVideoCapture(0, FrameRate._30Hz, Resolution._640x480,<br> ImageFormat.R8G8B8_24, false);<br> //}<br> <br> // Add this video capture device to the scene so that it can be used for<br> // the marker tracker<br> scene.AddVideoCaptureDevice(captureDevice);<br> <br> IMarkerTracker tracker = null;<br> <br> #if USE_ARTAG<br> // Create an optical marker tracker that uses ARTag library<br> tracker = new ARTagTracker();<br> // Set the configuration file to look for the marker specifications<br> tracker.InitTracker(638.052f, 633.673f, captureDevice.Width,<br> captureDevice.Height, false, &quot;ARTag.cf&quot;);<br> #else<br> // Create an optical marker tracker that uses ALVAR library<br> tracker = new ALVARMarkerTracker();<br> ((ALVARMarkerTracker)tracker).MaxMarkerError = 0.02f;<br> tracker.InitTracker(captureDevice.Width, captureDevice.Height, &quot;calib.xml&quot;, 9.0);<br> #endif<br> <br> // Set the marker tracker to use for our scene<br> scene.MarkerTracker = tracker;<br> <br> // Display the camera image in the background. Note that this parameter should<br> // be set after adding at least one video capture device to the Scene class.<br> scene.ShowCameraImage = true;<br> }<br> <br> <br> private void CreateLights()<br> {<br> // Create a directional light source<br> LightSource lightSource = new LightSource();<br> lightSource.Direction = new Vector3(-1, -1, -1);<br> lightSource.Diffuse = Color.White.ToVector4();<br> <br> LightSource lightSource2 = new LightSource();<br> lightSource2.Direction = new Vector3(1, 0, 0);<br> lightSource2.Diffuse = Color.White.ToVector4();<br> <br> LightSource lightSource3 = new LightSource();<br> lightSource3.Direction = new Vector3(-0.5f, 0, 1);<br> lightSource3.Diffuse = new Vector4(0.5f, 0.5f, 0.5f, 1);<br> <br> // Create a light node to hold the light source<br> LightNode lightNode = new LightNode();<br> lightNode.LightSources.Add(lightSource);<br> lightNode.LightSources.Add(lightSource2);<br> lightNode.LightSources.Add(lightSource3);<br> <br> scene.RootNode.AddChild(lightNode);<br> }<br> <br> private void CreateGround()<br> {<br> <br> <br> groundNode = new GeometryNode(&quot;Ground&quot;);<br> <br> #if USE_ARTAG<br> groundNode.Model = new Box(85, 66, 0.1f);<br> #else<br> groundNode.Model = new Box(95, 59, 0.1f);<br> #endif<br> <br> // Set this ground model to act as an occluder so that it appears transparent<br> groundNode.IsOccluder = true;<br> <br> // Make the ground model to receive shadow casted by other objects with<br> // CastShadows set to true<br> groundNode.Model.ReceiveShadows = true;<br> <br> Material groundMaterial = new Material();<br> groundMaterial.Diffuse = Color.Gray.ToVector4();<br> groundMaterial.Specular = Color.White.ToVector4();<br> groundMaterial.SpecularPower = 20;<br> <br> groundNode.Material = groundMaterial;<br> <br> groundMarkerNode.AddChild(groundNode);<br> }<br> <br> <br> /// &lt;summary&gt;<br> /// Allows the game to run logic such as updating the world,<br> /// checking for collisions, gathering input, and playing audio.<br> /// &lt;/summary&gt;<br> /// &lt;param name=&quot;gameTime&quot;&gt;Provides a snapshot of timing values.&lt;/param&gt;<br> protected override void Update(GameTime gameTime)<br> {<br> if (player.State == MediaState.Stopped)<br> {<br> player.IsLooped = true;<br> player.Play(video);<br> }<br> <br> base.Update(gameTime);<br> <br> }<br> <br> <br> <br> /// &lt;summary&gt;<br> /// This is called when the game should draw itself.<br> /// &lt;/summary&gt;<br> /// &lt;param name=&quot;gameTime&quot;&gt;Provides a snapshot of timing values.&lt;/param&gt;<br> protected override void Draw(GameTime gameTime)<br> {<br> <br> videoTexture = player.GetTexture();<br> base.Draw(gameTime);<br> <br> <br> }<br> SpriteBatch spriteBatch;<br> }<br> }</p>",
    "PostedDate": "2010-07-22T08:26:24.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "471380",
    "ThreadId": "220761",
    "Html": "<p>I did it for UNI project. I am not an UNI student any more. I don't have my source any more.</p>\r\n<p>I think you need to make 2D or 3D object to display image of video.</p>\r\n<p>Then you need to make material value to set material of 2D or 3D object you made.</p>\r\n<p>Like this :</p>\r\n<p>Material&nbsp;screenMat = new Material();</p>\r\n<p>Then, you need to set material value like this :</p>\r\n<p>screenMat.Diffuse = Color.Gray.ToVector4();<br>screenMat.Specular = Color.White.ToVector4();<br>screenMat.SpecularPower = 20;</p>\r\n<p>and</p>\r\n<p>screenMat.textures(?) = videoTexture;</p>\r\n<p>The important thing is that</p>\r\n<p>&lt;screenMat.textures(?) = videoTexture;&gt;</p>\r\n<p>this code must be with &lt;videoTexture = player.GetTexture();&gt;</p>\r\n<p>So that, videoTexure can be updataed while the video is playing.</p>\r\n<p>(I can't remember everything;;. I think this is all~!! I hope you can understand my english~(I am not english people;))</p>",
    "PostedDate": "2010-07-23T01:12:19.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]